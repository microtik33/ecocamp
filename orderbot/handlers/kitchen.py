from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from ..services.kitchen import get_orders_summary
from ..services.sheets import is_user_cook, get_orders_sheet
from .. import translations
from ..utils.auth_decorator import require_auth

@require_auth
async def kitchen_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º –¥–ª—è –ø–æ–≤–∞—Ä–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º
    summary = get_orders_summary()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    general_message = f"üìä –ó–∞–∫–∞–∑—ã –Ω–∞ *{summary['date']}*:\n\n"
    general_message += f"üìù –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['total_orders']}\n"
    await update.message.reply_text(general_message, parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤—Ç—Ä–∞–∫–µ
    breakfast_message = f"üç≥ *–ó–∞–≤—Ç—Ä–∞–∫* (–≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['breakfast']['count']}):\n\n"
    if summary['breakfast']['dishes']:
        breakfast_message += "–ë–ª—é–¥–∞:\n"
        for dish, count in sorted(summary['breakfast']['dishes'].items()):
            breakfast_message += f"- {dish}: {count} —à—Ç.\n"
        breakfast_message += "\n–ó–∞–∫–∞–∑—ã:\n\n"
        for order in summary['breakfast']['orders']:
            breakfast_message += f"{order}\n"
    else:
        breakfast_message += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
    await update.message.reply_text(breakfast_message, parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–µ–¥–µ
    lunch_message = f"üç≤ *–û–±–µ–¥* (–≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['lunch']['count']}):\n\n"
    if summary['lunch']['dishes']:
        lunch_message += "–ë–ª—é–¥–∞:\n"
        for dish, count in sorted(summary['lunch']['dishes'].items()):
            lunch_message += f"- {dish}: {count} —à—Ç.\n"
        lunch_message += "\n–ó–∞–∫–∞–∑—ã:\n\n"
        for order in summary['lunch']['orders']:
            lunch_message += f"{order}\n"
    else:
        lunch_message += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
    await update.message.reply_text(lunch_message, parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–∂–∏–Ω–µ
    dinner_message = f"üçΩ *–£–∂–∏–Ω* (–≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['dinner']['count']}):\n\n"
    if summary['dinner']['dishes']:
        dinner_message += "–ë–ª—é–¥–∞:\n"
        for dish, count in sorted(summary['dinner']['dishes'].items()):
            dinner_message += f"- {dish}: {count} —à—Ç.\n"
        dinner_message += "\n–ó–∞–∫–∞–∑—ã:\n\n"
        for order in summary['dinner']['orders']:
            dinner_message += f"{order}\n"
    else:
        dinner_message += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
    await update.message.reply_text(dinner_message, parse_mode=ParseMode.MARKDOWN)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    search_message = "–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã"
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ –∫–æ–º–Ω–∞—Ç–µ", callback_data="search_by_room"),
            InlineKeyboardButton("–ü–æ –Ω–æ–º–µ—Ä—É", callback_data="search_by_number")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(search_message, reply_markup=reply_markup)

@require_auth
async def search_orders_by_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–æ–º–Ω–∞—Ç
    keyboard = [
        [InlineKeyboardButton(f"{i}", callback_data=f"find_room:{i}") for i in range(1, 6)],
        [InlineKeyboardButton(f"{i}", callback_data=f"find_room:{i}") for i in range(6, 11)],
        [InlineKeyboardButton(f"{i}", callback_data=f"find_room:{i}") for i in range(11, 16)],
        [InlineKeyboardButton(f"{i}", callback_data=f"find_room:{i}") for i in range(16, 21)],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_kitchen")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã:", reply_markup=reply_markup)

@require_auth
async def search_orders_by_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    context.user_data['awaiting_order_number'] = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_kitchen")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:", reply_markup=reply_markup)

@require_auth
async def handle_order_number_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    if not context.user_data.get('awaiting_order_number'):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    order_number = update.message.text.strip()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    context.user_data['awaiting_order_number'] = False
    
    # –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É
    try:
        orders_sheet = get_orders_sheet()
        all_orders = orders_sheet.get_all_values()
        order_found = None
        
        for order in all_orders[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if order[0] == order_number:
                order_found = order
                break
        
        if order_found:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            message = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ ‚Ññ{order_found[0]}:\n\n"
            message += f"üè† –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã: {order_found[6]}\n"
            message += f"üë§ –ò–º—è: {order_found[7]}\n"
            message += f"üçΩ –í—Ä–µ–º—è –¥–Ω—è: {translations.get_meal_type(order_found[8])}\n"
            message += f"üç≤ –ë–ª—é–¥–∞: {order_found[9]}\n"
            message += f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {order_found[10]}\n"
            message += f"üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {order_found[11]}\n"
            message += f"‚è∞ –°—Ç–∞—Ç—É—Å: {order_found[2]}\n"
            message += f"üì® –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order_found[1]}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É"
            keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_kitchen")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω
            keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_kitchen")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(f"–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º {order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_markup)
    
    except Exception as e:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_kitchen")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞: {e}", reply_markup=reply_markup)

@require_auth
async def find_orders_by_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–∫–∞–∑—ã –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–º–Ω–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –∏–∑ callback_data
    room_number = query.data.split(':')[1]
    
    try:
        # –ò—â–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –∫–æ–º–Ω–∞—Ç–µ
        orders_sheet = get_orders_sheet()
        all_orders = orders_sheet.get_all_values()
        room_orders = [order for order in all_orders[1:] if order[6] == room_number]
        
        if room_orders:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
            message = f"üìã –ó–∞–∫–∞–∑—ã –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_number}:\n\n"
            
            for order in room_orders:
                message += f"üî¢ –ó–∞–∫–∞–∑ ‚Ññ{order[0]}\n"
                message += f"üë§ –ò–º—è: {order[7]}\n"
                message += f"üçΩ –í—Ä–µ–º—è –¥–Ω—è: {translations.get_meal_type(order[8])}\n"
                message += f"üç≤ –ë–ª—é–¥–∞: {order[9]}\n"
                message += f"üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {order[11]}\n"
                message += f"‚è∞ –°—Ç–∞—Ç—É—Å: {order[2]}\n"
                message += "‚îÄ" * 30 + "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç"
            keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç", callback_data="search_by_room")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup)
        else:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç", callback_data="search_by_room")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"–ó–∞–∫–∞–∑—ã –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_number} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=reply_markup)
    
    except Exception as e:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_kitchen")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}", reply_markup=reply_markup)

@require_auth
async def back_to_kitchen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    search_message = "–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã"
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ –∫–æ–º–Ω–∞—Ç–µ", callback_data="search_by_room"),
            InlineKeyboardButton("–ü–æ –Ω–æ–º–µ—Ä—É", callback_data="search_by_number")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(search_message, reply_markup=reply_markup) 