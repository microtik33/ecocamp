from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from ..services.kitchen import get_orders_summary
from ..services.sheets import is_user_cook, get_orders_sheet
from .. import translations
from ..utils.auth_decorator import require_auth
from datetime import datetime

@require_auth
async def kitchen_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º –¥–ª—è –ø–æ–≤–∞—Ä–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º
    summary = get_orders_summary()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    general_message = f"üìä –ó–∞–∫–∞–∑—ã –Ω–∞ *{summary['date']}*:\n\n"
    general_message += f"üìù –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['total_orders']}\n"
    await update.message.reply_text(general_message, parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤—Ç—Ä–∞–∫–µ
    breakfast_message = f"üç≥ *–ó–∞–≤—Ç—Ä–∞–∫* (–≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['breakfast']['count']}):\n\n"
    if summary['breakfast']['dishes']:
        breakfast_message += "–ë–ª—é–¥–∞:\n"
        for dish, count in sorted(summary['breakfast']['dishes'].items()):
            breakfast_message += f"- {dish}: {count} —à—Ç.\n"
        breakfast_message += "\n–ó–∞–∫–∞–∑—ã:\n\n"
        for order in summary['breakfast']['orders']:
            breakfast_message += f"{order}\n"
    else:
        breakfast_message += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
    await update.message.reply_text(breakfast_message, parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–µ–¥–µ
    lunch_message = f"üç≤ *–û–±–µ–¥* (–≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['lunch']['count']}):\n\n"
    if summary['lunch']['dishes']:
        lunch_message += "–ë–ª—é–¥–∞:\n"
        for dish, count in sorted(summary['lunch']['dishes'].items()):
            lunch_message += f"- {dish}: {count} —à—Ç.\n"
        lunch_message += "\n–ó–∞–∫–∞–∑—ã:\n\n"
        for order in summary['lunch']['orders']:
            lunch_message += f"{order}\n"
    else:
        lunch_message += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
    await update.message.reply_text(lunch_message, parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–∂–∏–Ω–µ
    dinner_message = f"üçΩ *–£–∂–∏–Ω* (–≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['dinner']['count']}):\n\n"
    if summary['dinner']['dishes']:
        dinner_message += "–ë–ª—é–¥–∞:\n"
        for dish, count in sorted(summary['dinner']['dishes'].items()):
            dinner_message += f"- {dish}: {count} —à—Ç.\n"
        dinner_message += "\n–ó–∞–∫–∞–∑—ã:\n\n"
        for order in summary['dinner']['orders']:
            dinner_message += f"{order}\n"
    else:
        dinner_message += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
    await update.message.reply_text(dinner_message, parse_mode=ParseMode.MARKDOWN)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    search_message = "–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã"
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ –∫–æ–º–Ω–∞—Ç–µ", callback_data="search_by_room"),
            InlineKeyboardButton("–ü–æ –Ω–æ–º–µ—Ä—É", callback_data="search_by_number")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(search_message, reply_markup=reply_markup)

@require_auth
async def search_orders_by_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–æ–º–Ω–∞—Ç
    keyboard = [
        [InlineKeyboardButton(f"{i}", callback_data=f"find_room:{i}") for i in range(1, 6)],
        [InlineKeyboardButton(f"{i}", callback_data=f"find_room:{i}") for i in range(6, 11)],
        [InlineKeyboardButton(f"{i}", callback_data=f"find_room:{i}") for i in range(11, 16)],
        [InlineKeyboardButton(f"{i}", callback_data=f"find_room:{i}") for i in range(16, 21)],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_kitchen")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã:", reply_markup=reply_markup)

@require_auth
async def search_orders_by_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    context.user_data['awaiting_order_number'] = True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_kitchen")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:", reply_markup=reply_markup)

@require_auth
async def handle_order_number_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    if not context.user_data.get('awaiting_order_number'):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    order_number = update.message.text.strip()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    context.user_data['awaiting_order_number'] = False
    
    # –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É
    try:
        orders_sheet = get_orders_sheet()
        all_orders = orders_sheet.get_all_values()
        order_found = None
        
        for order in all_orders[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if order[0] == order_number:
                order_found = order
                break
        
        if order_found:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            today = datetime.now().date()
            is_today_order = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            if order_found[11]:
                try:
                    delivery_date = datetime.strptime(order_found[11], "%d.%m.%y").date()
                    is_today_order = (delivery_date == today)
                except ValueError:
                    is_today_order = False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            is_accepted = order_found[2] == '–ü—Ä–∏–Ω—è—Ç'
            is_cancelled = order_found[2] == '–û—Ç–º–µ–Ω—ë–Ω'
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            status_emoji = "üî¥" if is_cancelled else ""
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            message = f"–ó–∞–∫–∞–∑ ‚Ññ{order_found[0]}\n\n"
            message += f"–°—Ç–∞—Ç—É—Å: {status_emoji} {order_found[2]}\n\n"
            message += f"–ö–æ–º–Ω–∞—Ç–∞: {order_found[6]}\n"
            message += f"–ò–º—è: {order_found[7]}\n"
            message += f"–í—Ä–µ–º—è –¥–Ω—è: {translations.get_meal_type(order_found[8])}\n"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            dishes_list = []
            if order_found[9]:
                dishes = order_found[9].split(',')
                dishes_text = "–ë–ª—é–¥–∞:\n"
                for dish in dishes:
                    dish = dish.strip()
                    dishes_text += f"- {dish}\n"
                dishes_list.append(dishes_text)
            else:
                dishes_list.append("–ë–ª—é–¥–∞: -\n")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –¥–∞—Ç—É –≤—ã–¥–∞—á–∏
            additional_info = f"–ü–æ–∂–µ–ª–∞–Ω–∏—è: {order_found[10] if order_found[10] and order_found[10] != '‚Äî' else '-'}\n"
            additional_info += f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {order_found[11]}\n\n"
            additional_info += f"–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order_found[1]}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –∫ —Ç–µ–∫—É—â–µ–π —Å–≤–æ–¥–∫–µ
            if not is_today_order:
                additional_info += "\n\n‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –ù–ï –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â—É—é —Å–≤–æ–¥–∫—É."
            elif not is_accepted:
                additional_info += "\n\n‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –ù–ï –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '–ü—Ä–∏–Ω—è—Ç', –∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–∫—É—â—É—é —Å–≤–æ–¥–∫—É."
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            MAX_MESSAGE_LENGTH = 4000
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            dishes_total_length = sum(len(dish) for dish in dishes_list)
            
            if len(message) + dishes_total_length + len(additional_info) > MAX_MESSAGE_LENGTH:
                # –ï—Å–ª–∏ –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                first_message = message
                await update.message.reply_text(first_message)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –±–ª—é–¥ —á–∞—Å—Ç—è–º–∏
                current_dishes = "–ë–ª—é–¥–∞:\n"
                dishes = order_found[9].split(',')
                
                for i, dish in enumerate(dishes):
                    dish = dish.strip()
                    dish_line = f"- {dish}\n"
                    
                    if len(current_dishes) + len(dish_line) > MAX_MESSAGE_LENGTH:
                        await update.message.reply_text(current_dishes)
                        current_dishes = "–ë–ª—é–¥–∞ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):\n" + dish_line
                    else:
                        current_dishes += dish_line
                
                if current_dishes and current_dishes != "–ë–ª—é–¥–∞:\n" and current_dishes != "–ë–ª—é–¥–∞ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):\n":
                    await update.message.reply_text(current_dishes)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_kitchen")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(additional_info, reply_markup=reply_markup)
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ
                complete_message = message + dishes_list[0] + additional_info
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É"
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_kitchen")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(complete_message, reply_markup=reply_markup)
        else:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω
            keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_kitchen")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(f"–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º {order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_markup)
    
    except Exception as e:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_kitchen")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞: {e}", reply_markup=reply_markup)
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞ –Ω–æ–º–µ—Ä {order_number}: {e}")

@require_auth
async def find_orders_by_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–∫–∞–∑—ã –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–º–Ω–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –∏–∑ callback_data
    room_number = query.data.split(':')[1]
    
    try:
        # –ò—â–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –∫–æ–º–Ω–∞—Ç–µ
        orders_sheet = get_orders_sheet()
        all_orders = orders_sheet.get_all_values()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = datetime.now().date()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã: —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ü—Ä–∏–Ω—è—Ç"
        room_orders = []
        for order in all_orders[1:]:
            if order[6] == room_number and order[2] == '–ü—Ä–∏–Ω—è—Ç' and order[11]:
                try:
                    delivery_date = datetime.strptime(order[11], "%d.%m.%y").date()
                    if delivery_date == today:
                        room_orders.append(order)
                except ValueError:
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
        
        if room_orders:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
            header = f"üìã –ó–∞–∫–∞–∑—ã –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_number} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):\n\n"
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = []
            current_message = header
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            MAX_MESSAGE_LENGTH = 4000
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏
            for order in room_orders:
                order_text = f"üî¢ –ó–∞–∫–∞–∑ ‚Ññ{order[0]}\n"
                order_text += f"üë§ –ò–º—è: {order[7]}\n"
                order_text += f"üçΩ –í—Ä–µ–º—è –¥–Ω—è: {translations.get_meal_type(order[8])}\n"
                order_text += f"üç≤ –ë–ª—é–¥–∞: {order[9]}\n"
                order_text += f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {order[10] if order[10] and order[10] != '‚Äî' else '-'}\n"
                order_text += f"‚è∞ –°—Ç–∞—Ç—É—Å: {order[2]}\n"
                order_text += "‚îÄ" * 30 + "\n"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if len(current_message) + len(order_text) > MAX_MESSAGE_LENGTH:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
                    messages.append(current_message)
                    current_message = header + order_text
                else:
                    # –ï—Å–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                    current_message += order_text
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
            if current_message and current_message != header:
                messages.append(current_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if messages:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è —Ç–µ–∫—É—â–µ–µ
                keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç", callback_data="search_by_room")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(messages[0], reply_markup=reply_markup)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                for i in range(1, len(messages)):
                    if i == len(messages) - 1:
                        # –ö –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                        await context.bot.send_message(
                            chat_id=query.message.chat_id,
                            text=messages[i],
                            reply_markup=reply_markup
                        )
                    else:
                        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                        await context.bot.send_message(
                            chat_id=query.message.chat_id,
                            text=messages[i]
                        )
        else:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–Ω–∞—Ç", callback_data="search_by_room")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"–ó–∞–∫–∞–∑—ã –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_number} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=reply_markup)
    
    except Exception as e:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_kitchen")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}", reply_markup=reply_markup)
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∫–æ–º–Ω–∞—Ç–µ {room_number}: {e}")

@require_auth
async def back_to_kitchen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    search_message = "–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã"
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ –∫–æ–º–Ω–∞—Ç–µ", callback_data="search_by_room"),
            InlineKeyboardButton("–ü–æ –Ω–æ–º–µ—Ä—É", callback_data="search_by_number")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(search_message, reply_markup=reply_markup) 