from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from ..services.kitchen import get_orders_summary
from ..services.sheets import is_user_cook
from .. import translations
from ..utils.auth_decorator import require_auth

@require_auth
async def kitchen_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º –¥–ª—è –ø–æ–≤–∞—Ä–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤–∞—Ä–æ–º
    if not is_user_cook(str(update.effective_user.id)):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º
    summary = get_orders_summary()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    general_message = f"üìä –ó–∞–∫–∞–∑—ã –Ω–∞ *{summary['date']}*:\n\n"
    general_message += f"üìù –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['total_orders']}\n"
    await update.message.reply_text(general_message, parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤—Ç—Ä–∞–∫–µ
    breakfast_message = f"üç≥ *–ó–∞–≤—Ç—Ä–∞–∫* (–≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['breakfast']['count']}):\n\n"
    if summary['breakfast']['dishes']:
        breakfast_message += "–ë–ª—é–¥–∞:\n"
        for dish, count in sorted(summary['breakfast']['dishes'].items()):
            breakfast_message += f"- {dish}: {count} —à—Ç.\n"
        breakfast_message += "\n–ó–∞–∫–∞–∑—ã:\n\n"
        for order in summary['breakfast']['orders']:
            breakfast_message += f"{order}\n"
    else:
        breakfast_message += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
    await update.message.reply_text(breakfast_message, parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–µ–¥–µ
    lunch_message = f"üç≤ *–û–±–µ–¥* (–≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['lunch']['count']}):\n\n"
    if summary['lunch']['dishes']:
        lunch_message += "–ë–ª—é–¥–∞:\n"
        for dish, count in sorted(summary['lunch']['dishes'].items()):
            lunch_message += f"- {dish}: {count} —à—Ç.\n"
        lunch_message += "\n–ó–∞–∫–∞–∑—ã:\n\n"
        for order in summary['lunch']['orders']:
            lunch_message += f"{order}\n"
    else:
        lunch_message += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
    await update.message.reply_text(lunch_message, parse_mode=ParseMode.MARKDOWN)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–∂–∏–Ω–µ
    dinner_message = f"üçΩ *–£–∂–∏–Ω* (–≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary['dinner']['count']}):\n\n"
    if summary['dinner']['dishes']:
        dinner_message += "–ë–ª—é–¥–∞:\n"
        for dish, count in sorted(summary['dinner']['dishes'].items()):
            dinner_message += f"- {dish}: {count} —à—Ç.\n"
        dinner_message += "\n–ó–∞–∫–∞–∑—ã:\n\n"
        for order in summary['dinner']['orders']:
            dinner_message += f"{order}\n"
    else:
        dinner_message += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n"
    await update.message.reply_text(dinner_message, parse_mode=ParseMode.MARKDOWN) 