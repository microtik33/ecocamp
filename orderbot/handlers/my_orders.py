import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from datetime import datetime, timedelta
import logging
from .. import translations
from ..services.sheets import get_orders_sheet, is_user_authorized
from ..services.user import update_user_stats, get_user_data
from ..utils.auth_decorator import require_auth
from .states import MENU, EDIT_ORDER
from typing import List, Dict, Optional
from ..utils.profiler import profile_time
from ..utils.markdown_utils import escape_markdown_v2
from .order import get_order_info, show_order_form, ask_meal_type, process_order_save

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

@profile_time
@require_auth
async def show_user_orders(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è - —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    is_command = bool(update.message)
    
    if not is_command:
        query = update.callback_query
        await query.answer()
    
    user_id = str(update.effective_user.id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MENU, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if 'state' not in context.user_data:
        context.user_data['state'] = MENU
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    tomorrow_date = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%y")
    
    from orderbot.services.sheets import get_orders_sheet
    orders_sheet = get_orders_sheet()
    all_orders = orders_sheet.get_all_values()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "–ê–∫—Ç–∏–≤–µ–Ω" –∏ "–û–ø–ª–∞—á–µ–Ω" –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    user_orders = [
        row for row in all_orders[1:] 
        if row[3] == user_id and 
           row[2] in ['–ê–∫—Ç–∏–≤–µ–Ω', '–û–ø–ª–∞—á–µ–Ω'] and 
           row[11] == tomorrow_date  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    ]
    
    if not user_orders:
        message = escape_markdown_v2(translations.get_message('no_active_orders'))
        keyboard = [
            [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
            [InlineKeyboardButton(translations.get_button('today_orders'), callback_data='today_orders')],
            [InlineKeyboardButton(translations.get_button('orders_to_pay'), callback_data='orders_to_pay')],
            [InlineKeyboardButton(translations.get_button('paid_orders'), callback_data='paid_orders')],
            [InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if is_command:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ —Ç–∏–ø—É –µ–¥—ã: –ó–∞–≤—Ç—Ä–∞–∫ - –û–±–µ–¥ - –£–∂–∏–Ω
        def meal_type_priority(meal_type):
            if meal_type == '–ó–∞–≤—Ç—Ä–∞–∫':
                return 0
            elif meal_type == '–û–±–µ–¥':
                return 1
            elif meal_type == '–£–∂–∏–Ω':
                return 2
            return 3  # –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            
        user_orders.sort(key=lambda x: meal_type_priority(x[8]))
        
        messages = []
        current_message = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        messages.append(escape_markdown_v2("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞:"))
        for order in user_orders:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            delivery_date = order[11] if order[11] else None
            meal_type = order[8]
            meal_type_with_date = f"{translations.get_meal_type(meal_type)} ({delivery_date})" if delivery_date else translations.get_meal_type(meal_type)
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2
            escaped_order_id = escape_markdown_v2(order[0])
            escaped_status = escape_markdown_v2(order[2])
            escaped_timestamp = escape_markdown_v2(order[1])
            escaped_room = escape_markdown_v2(order[6])
            escaped_name = escape_markdown_v2(order[7])
            escaped_meal_type = escape_markdown_v2(meal_type_with_date)
            
            # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "‚úèÔ∏è"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è "–ê–∫—Ç–∏–≤–µ–Ω"
            if order[2] == '–û–ø–ª–∞—á–µ–Ω':
                status_emoji = "‚úÖ"
            
            order_info = (
                f"{status_emoji} –ó–∞–∫–∞–∑ *{escaped_order_id}* \\({escaped_status}\\)\n"
                f"üçΩ –í—Ä–µ–º—è –¥–Ω—è: {escaped_meal_type}\n"
                f"üç≤ –ë–ª—é–¥–∞:\n"
            )
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–ª—é–¥–∞–º–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ
            dishes = order[9].split(', ')
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            has_quantities = False
            quantities = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏ (12-—è –∫–æ–ª–æ–Ω–∫–∞)
            if len(order) > 12 and order[12]:
                try:
                    # –ü–∞—Ä—Å–∏–º JSON —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
                    import json
                    quantities = json.loads(order[12].replace("'", '"'))
                    has_quantities = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –±–ª—é–¥: {e}")
            
            for dish in dishes:
                escaped_dish = escape_markdown_v2(dish)
                quantity = quantities.get(dish, 1) if has_quantities else 1
                order_info += f"  ‚Ä¢ {escaped_dish} x{quantity}\n"
            
            escaped_wishes = escape_markdown_v2(order[10])
            order_info += f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {escaped_wishes}\n"
            
            order_sum = int(float(order[5])) if order[5] else 0
            escaped_sum = escape_markdown_v2(str(order_sum))
            order_info += f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {escaped_sum} —Ä\\.\n"
            order_info += translations.get_message('active_orders_separator')
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
            if len(current_message + order_info) > 3000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –¥–æ–ø. —Ç–µ–∫—Å—Ç–∞
                messages.append(current_message)
                current_message = order_info
            else:
                current_message += order_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if current_message:
            messages.append(current_message)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {len(user_orders)}")
        
        try:
            if len(messages) == 1:
                # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = messages[0]
                if is_command:
                    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN_V2)
                else:
                    await update.callback_query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN_V2)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if is_command:
                    await update.message.reply_text(messages[0], parse_mode=ParseMode.MARKDOWN_V2)
                else:
                    await update.callback_query.edit_message_text(messages[0], parse_mode=ParseMode.MARKDOWN_V2)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                for msg in messages[1:]:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=msg,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton(translations.get_button('edit_active_orders'), callback_data='edit_active_orders')],                
                [InlineKeyboardButton(translations.get_button('today_orders'), callback_data='today_orders')],
                [InlineKeyboardButton(translations.get_button('orders_to_pay'), callback_data='orders_to_pay')],
                [InlineKeyboardButton(translations.get_button('paid_orders'), callback_data='paid_orders')],
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
                [InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=translations.get_message('what_next'),
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {e}")
            logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
            error_message = translations.get_message('orders_display_error')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('edit_active_orders'), callback_data='edit_active_orders')],                
                [InlineKeyboardButton(translations.get_button('today_orders'), callback_data='today_orders')],
                [InlineKeyboardButton(translations.get_button('orders_to_pay'), callback_data='orders_to_pay')],
                [InlineKeyboardButton(translations.get_button('paid_orders'), callback_data='paid_orders')],
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
                [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            if is_command:
                await update.message.reply_text(error_message, reply_markup=reply_markup)
            else:
                await update.callback_query.edit_message_text(error_message, reply_markup=reply_markup)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MENU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    context.user_data['state'] = MENU
    return MENU

@profile_time
@require_auth
async def show_today_orders(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç", "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", "–û–ø–ª–∞—á–µ–Ω"."""
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MENU, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if 'state' not in context.user_data:
        context.user_data['state'] = MENU
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì"
    today_date = datetime.now()
    today_date_str = today_date.strftime("%d.%m.%y")
    
    from orderbot.services.sheets import get_orders_sheet
    orders_sheet = get_orders_sheet()
    all_orders = orders_sheet.get_all_values()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç", "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", "–û–ø–ª–∞—á–µ–Ω"
    today_orders = [
        row for row in all_orders[1:] 
        if row[3] == user_id and 
           row[2] in ['–ü—Ä–∏–Ω—è—Ç', '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', '–û–ø–ª–∞—á–µ–Ω'] and 
           row[11] == today_date_str  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –≤—ã–¥–∞—á–∏
    ]
    
    if not today_orders:
        message = escape_markdown_v2("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        keyboard = [
            [InlineKeyboardButton(translations.get_button('back_to_orders'), callback_data='my_orders')],
            [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Ç–∏–ø—É –µ–¥—ã: –ó–∞–≤—Ç—Ä–∞–∫ - –û–±–µ–¥ - –£–∂–∏–Ω
        def meal_type_priority(meal_type):
            if meal_type == '–ó–∞–≤—Ç—Ä–∞–∫':
                return 0
            elif meal_type == '–û–±–µ–¥':
                return 1
            elif meal_type == '–£–∂–∏–Ω':
                return 2
            return 3  # –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            
        today_orders.sort(key=lambda x: meal_type_priority(x[8]))
        
        messages = []
        current_message = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        messages.append(escape_markdown_v2("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:"))
        
        for order in today_orders:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            delivery_date = order[11] if order[11] else None
            meal_type = order[8]
            meal_type_with_date = f"{translations.get_meal_type(meal_type)} ({delivery_date})" if delivery_date else translations.get_meal_type(meal_type)
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2
            escaped_order_id = escape_markdown_v2(order[0])
            escaped_status = escape_markdown_v2(order[2])
            escaped_room = escape_markdown_v2(order[6])
            escaped_name = escape_markdown_v2(order[7])
            escaped_meal_type = escape_markdown_v2(meal_type_with_date)
            
            # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_emoji = "‚úÖ"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è "–û–ø–ª–∞—á–µ–Ω"
            if order[2] == '–ü—Ä–∏–Ω—è—Ç':
                status_emoji = "üõé"
            elif order[2] == '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã':
                status_emoji = "üí∏"
            
            order_info = (
                f"{status_emoji} –ó–∞–∫–∞–∑ *{escaped_order_id}* \\({escaped_status}\\)\n"
                f"üè† –ö–æ–º–Ω–∞—Ç–∞: {escaped_room}\n"
                f"üë§ –ò–º—è: {escaped_name}\n"
                f"üçΩ –í—Ä–µ–º—è –¥–Ω—è: {escaped_meal_type}\n"
                f"üç≤ –ë–ª—é–¥–∞:\n"
            )
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–ª—é–¥–∞–º–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ
            dishes = order[9].split(', ')
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            has_quantities = False
            quantities = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏ (12-—è –∫–æ–ª–æ–Ω–∫–∞)
            if len(order) > 12 and order[12]:
                try:
                    # –ü–∞—Ä—Å–∏–º JSON —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏
                    import json
                    quantities = json.loads(order[12].replace("'", '"'))
                    has_quantities = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –±–ª—é–¥: {e}")
            
            for dish in dishes:
                escaped_dish = escape_markdown_v2(dish)
                quantity = quantities.get(dish, 1) if has_quantities else 1
                order_info += f"  ‚Ä¢ {escaped_dish} x{quantity}\n"
            
            escaped_wishes = escape_markdown_v2(order[10])
            order_info += f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {escaped_wishes}\n"
            
            order_sum = int(float(order[5])) if order[5] else 0
            escaped_sum = escape_markdown_v2(str(order_sum))
            order_info += f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {escaped_sum} —Ä\\.\n"
            order_info += translations.get_message('active_orders_separator')
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
            if len(current_message + order_info) > 3000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –¥–æ–ø. —Ç–µ–∫—Å—Ç–∞
                messages.append(current_message)
                current_message = order_info
            else:
                current_message += order_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if current_message:
            messages.append(current_message)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_orders)}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(messages[0], parse_mode=ParseMode.MARKDOWN_V2)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg in messages[1:]:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=msg,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back_to_orders'), callback_data='my_orders')],
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=translations.get_message('what_next'),
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
            logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
            error_message = translations.get_message('orders_display_error')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back_to_orders'), callback_data='my_orders')],
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(error_message, reply_markup=reply_markup)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MENU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    context.user_data['state'] = MENU
    return MENU

@profile_time
@require_auth
async def show_orders_to_pay(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–∏–Ω—è—Ç—ã—Ö."""
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MENU, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if 'state' not in context.user_data:
        context.user_data['state'] = MENU
    
    from orderbot.services.sheets import get_orders_sheet
    orders_sheet = get_orders_sheet()
    all_orders = orders_sheet.get_all_values()
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç" –∏ "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
    user_orders = [row for row in all_orders[1:] if row[3] == user_id and row[2] in ['–ü—Ä–∏–Ω—è—Ç', '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã']]
    
    if not user_orders:
        message = escape_markdown_v2("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É.")
        keyboard = [
            [InlineKeyboardButton(translations.get_button('back_to_orders'), callback_data='my_orders')],
            [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
            [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å—Ç–∞—Ç—É—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", "–ü—Ä–∏–Ω—è—Ç"
        def order_status_priority(status):
            if status == '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã':
                return 0
            elif status == '–ü—Ä–∏–Ω—è—Ç':
                return 1
            return 2  # –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        
        user_orders.sort(key=lambda x: (order_status_priority(x[2]), x[1]))
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        awaiting_payment_orders = [order for order in user_orders if order[2] == '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã']
        processing_orders = [order for order in user_orders if order[2] == '–ü—Ä–∏–Ω—è—Ç']
        
        messages = []
        current_message = ""
        total_sum = 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã
        if awaiting_payment_orders:
            messages.append(escape_markdown_v2("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã:"))
            for order in awaiting_payment_orders:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                delivery_date = order[11] if order[11] else None
                meal_type = order[8]
                meal_type_with_date = f"{translations.get_meal_type(meal_type)} ({delivery_date})" if delivery_date else translations.get_meal_type(meal_type)
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2
                escaped_order_id = escape_markdown_v2(order[0])
                escaped_status = escape_markdown_v2(order[2])
                escaped_timestamp = escape_markdown_v2(order[1])
                escaped_room = escape_markdown_v2(order[6])
                escaped_name = escape_markdown_v2(order[7])
                escaped_meal_type = escape_markdown_v2(meal_type_with_date)
                
                order_info = (
                    f"üí∏ –ó–∞–∫–∞–∑ *{escaped_order_id}* \\({escaped_status}\\)\n"
                    f"üçΩ –í—Ä–µ–º—è –¥–Ω—è: {escaped_meal_type}\n"
                    f"üç≤ –ë–ª—é–¥–∞:\n"
                )
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–ª—é–¥–∞–º–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ
                dishes = order[9].split(', ')
                for dish in dishes:
                    escaped_dish = escape_markdown_v2(dish)
                    order_info += f"  ‚Ä¢ {escaped_dish}\n"
                
                escaped_wishes = escape_markdown_v2(order[10])
                order_info += f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {escaped_wishes}\n"
                
                order_sum = int(float(order[5])) if order[5] else 0
                total_sum += order_sum
                escaped_sum = escape_markdown_v2(str(order_sum))
                order_info += f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {escaped_sum} —Ä\\.\n"
                order_info += translations.get_message('active_orders_separator')
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
                if len(current_message + order_info) > 3000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –¥–æ–ø. —Ç–µ–∫—Å—Ç–∞
                    messages.append(current_message)
                    current_message = order_info
                else:
                    current_message += order_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        if processing_orders:
            if current_message:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                messages.append(current_message)
                current_message = ""
            
            messages.append(escape_markdown_v2("–ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞–∫–∞–∑—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–≤–∞—Ä—É:"))
            for order in processing_orders:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                delivery_date = order[11] if order[11] else None
                meal_type = order[8]
                meal_type_with_date = f"{translations.get_meal_type(meal_type)} ({delivery_date})" if delivery_date else translations.get_meal_type(meal_type)
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2
                escaped_order_id = escape_markdown_v2(order[0])
                escaped_status = escape_markdown_v2(order[2])
                escaped_timestamp = escape_markdown_v2(order[1])
                escaped_room = escape_markdown_v2(order[6])
                escaped_name = escape_markdown_v2(order[7])
                escaped_meal_type = escape_markdown_v2(meal_type_with_date)
                
                order_info = (
                    f"üõé –ó–∞–∫–∞–∑ *{escaped_order_id}* \\({escaped_status}\\)\n"
                    f"üçΩ –í—Ä–µ–º—è –¥–Ω—è: {escaped_meal_type}\n"
                    f"üç≤ –ë–ª—é–¥–∞:\n"
                )
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–ª—é–¥–∞–º–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ
                dishes = order[9].split(', ')
                for dish in dishes:
                    escaped_dish = escape_markdown_v2(dish)
                    order_info += f"  ‚Ä¢ {escaped_dish}\n"
                
                escaped_wishes = escape_markdown_v2(order[10])
                order_info += f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {escaped_wishes}\n"
                
                order_sum = int(float(order[5])) if order[5] else 0
                total_sum += order_sum
                escaped_sum = escape_markdown_v2(str(order_sum))
                order_info += f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {escaped_sum} —Ä\\.\n"
                order_info += translations.get_message('active_orders_separator')
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
                if len(current_message + order_info) > 3000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –¥–æ–ø. —Ç–µ–∫—Å—Ç–∞
                    messages.append(current_message)
                    current_message = order_info
                else:
                    current_message += order_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if current_message:
            messages.append(current_message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        escaped_total_sum = escape_markdown_v2(str(total_sum))
        total_sum_message = translations.get_message('total_sum', sum=escaped_total_sum)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É: {total_sum}, —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {escaped_total_sum}")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–º–º–µ: {total_sum_message}")
        
        messages[-1] += total_sum_message
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(messages[0], parse_mode=ParseMode.MARKDOWN_V2)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg in messages[1:]:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=msg,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton(translations.get_button('pay_orders'), callback_data='pay_orders')],
                [InlineKeyboardButton(translations.get_button('back_to_orders'), callback_data='my_orders')],
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=translations.get_message('what_next'),
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É: {e}")
            logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
            error_message = translations.get_message('orders_display_error')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back_to_orders'), callback_data='my_orders')],
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
                [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(error_message, reply_markup=reply_markup)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MENU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    context.user_data['state'] = MENU
    return MENU

@profile_time
@require_auth
async def show_paid_orders(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MENU, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if 'state' not in context.user_data:
        context.user_data['state'] = MENU
    
    from orderbot.services.sheets import get_orders_sheet
    orders_sheet = get_orders_sheet()
    all_orders = orders_sheet.get_all_values()
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–û–ø–ª–∞—á–µ–Ω"
    user_orders = [row for row in all_orders[1:] if row[3] == user_id and row[2] == '–û–ø–ª–∞—á–µ–Ω']
    
    if not user_orders:
        message = escape_markdown_v2("–£ –≤–∞—Å –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        keyboard = [
            [InlineKeyboardButton(translations.get_button('back_to_orders'), callback_data='my_orders')],
            [InlineKeyboardButton(translations.get_button('orders_to_pay'), callback_data='orders_to_pay')],
            [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞—Ç–µ
        user_orders.sort(key=lambda x: x[1], reverse=True)  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è, —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
        
        messages = []
        current_message = ""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        messages.append(escape_markdown_v2("–í–∞—à–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:"))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        for order in user_orders:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            delivery_date = order[11] if order[11] else None
            meal_type = order[8]
            meal_type_with_date = f"{translations.get_meal_type(meal_type)} ({delivery_date})" if delivery_date else translations.get_meal_type(meal_type)
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2
            escaped_order_id = escape_markdown_v2(order[0])
            escaped_status = escape_markdown_v2(order[2])
            escaped_timestamp = escape_markdown_v2(order[1])
            escaped_room = escape_markdown_v2(order[6])
            escaped_name = escape_markdown_v2(order[7])
            escaped_meal_type = escape_markdown_v2(meal_type_with_date)
            
            order_info = (
                f"‚úÖ –ó–∞–∫–∞–∑ *{escaped_order_id}* \\({escaped_status}\\)\n"
                f"üçΩ –í—Ä–µ–º—è –¥–Ω—è: {escaped_meal_type}\n"
                f"üç≤ –ë–ª—é–¥–∞:\n"
            )
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–ª—é–¥–∞–º–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ
            dishes = order[9].split(', ')
            for dish in dishes:
                escaped_dish = escape_markdown_v2(dish)
                order_info += f"  ‚Ä¢ {escaped_dish}\n"
            
            escaped_wishes = escape_markdown_v2(order[10])
            order_info += f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {escaped_wishes}\n"
            
            order_sum = int(float(order[5])) if order[5] else 0
            escaped_sum = escape_markdown_v2(str(order_sum))
            order_info += f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {escaped_sum} —Ä\\.\n"
            order_info += translations.get_message('active_orders_separator')
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
            if len(current_message + order_info) > 3000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –¥–æ–ø. —Ç–µ–∫—Å—Ç–∞
                messages.append(current_message)
                current_message = order_info
            else:
                current_message += order_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if current_message:
            messages.append(current_message)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(user_orders)}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(messages[0], parse_mode=ParseMode.MARKDOWN_V2)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg in messages[1:]:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=msg,
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back_to_orders'), callback_data='my_orders')],
                [InlineKeyboardButton(translations.get_button('orders_to_pay'), callback_data='orders_to_pay')],
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=translations.get_message('what_next'),
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
            logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
            error_message = translations.get_message('orders_display_error')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back_to_orders'), callback_data='my_orders')],
                [InlineKeyboardButton(translations.get_button('orders_to_pay'), callback_data='orders_to_pay')],
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(error_message, reply_markup=reply_markup)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MENU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    context.user_data['state'] = MENU
    return MENU

@require_auth
async def show_edit_active_orders(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    tomorrow_date = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%y")
    
    from orderbot.services.sheets import get_orders_sheet
    orders_sheet = get_orders_sheet()
    all_orders = orders_sheet.get_all_values()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    editable_orders = [
        row for row in all_orders[1:] 
        if row[3] == user_id and 
           row[2] == '–ê–∫—Ç–∏–≤–µ–Ω' and 
           row[11] == tomorrow_date  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    ]
    
    if not editable_orders:
        message = translations.get_message('no_active_orders')
        keyboard = [
            [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
            [InlineKeyboardButton(translations.get_button('today_orders'), callback_data='today_orders')],
            [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)
        return MENU
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    message = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    keyboard = []
    for order in editable_orders:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        delivery_date = order[11] if order[11] else None
        meal_type = order[8]
        meal_type_with_date = f"{translations.get_meal_type(meal_type)} ({delivery_date})" if delivery_date else translations.get_meal_type(meal_type)
        
        button_text = f"–ó–∞–∫–∞–∑ {order[0]} - {meal_type_with_date}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"edit_order:{order[0]}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton(translations.get_button('back'), callback_data="my_orders")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)
    return MENU