import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from datetime import datetime, timedelta, date
import logging
from .. import translations
from ..services import sheets
from ..services.sheets import (
    orders_sheet, get_dishes_for_meal, get_next_order_id, 
    update_user_stats, save_order, update_order, is_user_authorized
)
from ..services.user import update_user_info, update_user_stats
from ..utils.time_utils import is_order_time
from ..utils.auth_decorator import require_auth
from .states import PHONE, MENU, ROOM, NAME, MEAL_TYPE, DISH_SELECTION, WISHES, QUESTION, EDIT_ORDER, PAYMENT
from typing import List, Tuple, Dict, Optional, Any, Union
from ..utils.profiler import profile_time
from ..utils.markdown_utils import escape_markdown_v2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

MAX_DISH_QUANTITY = 20
MIN_DISH_QUANTITY = 1

def get_delivery_date(meal_type: str) -> datetime:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞. –í—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å."""
    now = datetime.now()
    tomorrow = now.date() + timedelta(days=1)
    return tomorrow

async def show_order_form(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º."""
    order = context.user_data.get('order', {})
    
    message = "üìã –í–∞—à –∑–∞–∫–∞–∑:\n\n"
    message += f"üè† –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã: {order.get('room', '‚Äî')}\n"
    message += f"üë§ –ò–º—è: {order.get('name', '‚Äî')}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –∫ —Ç–∏–ø—É –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    meal_type = order.get('meal_type', '‚Äî')
    delivery_date = order.get('delivery_date')
    if delivery_date:
        # –ï—Å–ª–∏ delivery_date —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∫–∞–∫ –µ—Å—Ç—å
        if isinstance(delivery_date, str):
            date_str = delivery_date
        else:
            date_str = delivery_date.strftime("%d.%m")
        message += f"üçΩ –í—Ä–µ–º—è –¥–Ω—è: {translations.get_meal_type(meal_type)} ({date_str})\n"
    else:
        message += f"üçΩ –í—Ä–µ–º—è –¥–Ω—è: {translations.get_meal_type(meal_type)}\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    message += "üç≤ –ë–ª—é–¥–∞:\n"
    if order.get('dishes'):
        for dish in order['dishes']:
            quantity = order['quantities'].get(dish, 1)
            message += f"  ‚Ä¢ {dish} x{quantity}\n"
    else:
        message += "  ‚Äî\n"
    
    message += f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {order.get('wishes', '‚Äî')}"
    
    if order.get('dishes') and order.get('prices'):
        total = int(sum(float(order['prices'].get(dish, 0)) * order['quantities'].get(dish, 1) 
                       for dish in order['dishes']))
        message += f"\nüí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} —Ä."
    
    return message

@require_auth
async def handle_order_time_error(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è."""
    query = update.callback_query
    await query.answer()
    
    message = translations.get_message('wrong_order_time')
    keyboard = [
        [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
        [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=message, reply_markup=reply_markup)
    return MENU

@profile_time
@require_auth
async def ask_room(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞
    if not is_order_time():
        return await handle_order_time_error(update, context)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if not context.user_data.get('editing'):
        context.user_data['order'] = {}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–æ–º–Ω–∞—Ç
    keyboard = [
        [InlineKeyboardButton(f"{i}", callback_data=f"room:{i}") for i in range(1, 6)],
        [InlineKeyboardButton(f"{i}", callback_data=f"room:{i}") for i in range(6, 11)],
        [InlineKeyboardButton(f"{i}", callback_data=f"room:{i}") for i in range(11, 16)],
        [InlineKeyboardButton(f"{i}", callback_data=f"room:{i}") for i in range(16, 21)],
        [InlineKeyboardButton(translations.get_button('cancel'), callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–æ–π –∑–∞–∫–∞–∑–∞
    order_message = await show_order_form(update, context)
    sent_message = await query.message.reply_text(order_message)
    context.user_data['order_chat_id'] = sent_message.chat_id
    context.user_data['order_message_id'] = sent_message.message_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–º–Ω–∞—Ç—ã
    await query.message.reply_text(translations.get_message('choose_room'), reply_markup=reply_markup, parse_mode="MarkdownV2")
    await query.message.delete()
    return ROOM

async def ask_name(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏."""
    query = update.callback_query
    await query.answer()
    await query.delete_message()
    
    action, value = query.data.split(':')
    if action == 'room':
        if context.user_data.get('editing') and context.user_data['order'].get('room') == value:
            pass
        else:
            context.user_data['order']['room'] = value
    
    context.user_data['state'] = NAME
    
    order_message = await show_order_form(update, context)
    prompt_message = translations.get_message('enter_name')
    
    keyboard = [
        [InlineKeyboardButton(translations.get_button('back'), callback_data="back")],
        [InlineKeyboardButton(translations.get_button('cancel'), callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await context.bot.edit_message_text(
            chat_id=context.user_data['order_chat_id'],
            message_id=context.user_data['order_message_id'],
            text=order_message
        )
    except telegram.error.BadRequest as e:
        if "Message is not modified" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É
            pass
        else:
            raise e
    
    sent_message = await query.message.reply_text(prompt_message, reply_markup=reply_markup)
    context.user_data['prompt_message_id'] = sent_message.message_id
    return NAME

@profile_time
@require_auth
async def ask_meal_type(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ –µ–¥—ã."""
    context.user_data['state'] = MEAL_TYPE
    
    try:
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=context.user_data['prompt_message_id']
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏: {e}")
    
    if not isinstance(update, telegram.Update) or not update.message:
        pass
    else:
        if context.user_data.get('editing') and context.user_data['order'].get('name') == update.message.text:
            pass
        else:
            context.user_data['order']['name'] = update.message.text
        await update.message.delete()
    
    order_message = await show_order_form(update, context)
    prompt_message = translations.get_message('choose_meal')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    breakfast_date = get_delivery_date('breakfast')
    lunch_date = get_delivery_date('lunch')
    dinner_date = get_delivery_date('dinner')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏
    date_format = "%d.%m"
    breakfast_str = breakfast_date.strftime(date_format)
    lunch_str = lunch_date.strftime(date_format)
    dinner_str = dinner_date.strftime(date_format)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton(f"{translations.get_button('breakfast')} ({breakfast_str})", 
                               callback_data="meal:–ó–∞–≤—Ç—Ä–∞–∫"),
            InlineKeyboardButton(f"{translations.get_button('lunch')} ({lunch_str})", 
                               callback_data="meal:–û–±–µ–¥"),
            InlineKeyboardButton(f"{translations.get_button('dinner')} ({dinner_str})", 
                               callback_data="meal:–£–∂–∏–Ω")
        ],
        [InlineKeyboardButton(translations.get_button('back'), callback_data="back")],
        [InlineKeyboardButton(translations.get_button('cancel'), callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await context.bot.edit_message_text(
            chat_id=context.user_data['order_chat_id'],
            message_id=context.user_data['order_message_id'],
            text=order_message
        )
    except telegram.error.BadRequest as e:
        if "Message is not modified" in str(e):
            pass
        else:
            raise e
    
    if isinstance(update, telegram.Update) and update.message:
        sent_message = await update.message.reply_text(prompt_message, reply_markup=reply_markup)
    else:
        sent_message = await update.callback_query.message.reply_text(prompt_message, reply_markup=reply_markup)
    
    context.user_data['prompt_message_id'] = sent_message.message_id
    return MEAL_TYPE

def _build_dish_keyboard(
    dishes_with_prices: List[Tuple[str, str, str]],
    quantities: Dict[str, int],
    prices: Dict[str, str]
) -> List[List[InlineKeyboardButton]]:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª—é–¥.
    
    Args:
        dishes_with_prices: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ_–±–ª—é–¥–∞, —Ü–µ–Ω–∞, –≤–µ—Å)
        quantities: –°–ª–æ–≤–∞—Ä—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥
        prices: –°–ª–æ–≤–∞—Ä—å —Ü–µ–Ω –±–ª—é–¥
    
    Returns:
        List[List[InlineKeyboardButton]]: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥
    """
    keyboard = []
    for dish, price, weight in dishes_with_prices:
        quantity = quantities.get(dish, 0)
        if quantity > 0:
            text = f"‚úÖ {dish} {price} —Ä. ({weight}) ({quantity})"
            keyboard.append([
                InlineKeyboardButton("-", callback_data=f"quantity:{dish}:{max(0, quantity-1)}"),
                InlineKeyboardButton(text, callback_data=f"quantity:{dish}:{quantity}"),
                InlineKeyboardButton("+", callback_data=f"quantity:{dish}:{min(MAX_DISH_QUANTITY, quantity+1)}")
            ])
        else:
            text = f"{dish} {price} —Ä. ({weight})"
            keyboard.append([InlineKeyboardButton(text, callback_data=f"select_dish:{dish}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.append([InlineKeyboardButton(translations.get_button('done'), callback_data="done")])
    keyboard.append([InlineKeyboardButton(translations.get_button('back'), callback_data="back")])
    keyboard.append([InlineKeyboardButton(translations.get_button('cancel'), callback_data="cancel")])
    
    return keyboard

@profile_time
@require_auth
async def show_dishes(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö –≤—ã–±–æ—Ä.
    
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ —Å —Ü–µ–Ω–∞–º–∏ –∏ –≤–µ—Å–æ–º, –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –±–ª—é–¥–∞
    –∏ –∏–∑–º–µ–Ω—è—Ç—å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
    - –í—ã–±–æ—Ä –±–ª—é–¥–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–∫–∞–∑)
    - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞
    - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ (–∫–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ")
    - –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    - –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (DISH_SELECTION –∏–ª–∏ WISHES)
    
    Raises:
        telegram.error.BadRequest: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π "done"
    if query.data == "done":
        return await handle_dish_selection(update, context)
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await query.message.delete()
    except telegram.error.BadRequest:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    
    context.user_data['state'] = DISH_SELECTION
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    try:
        action, value = query.data.split(':', 1)
    except ValueError:
        return DISH_SELECTION
    
    order = context.user_data.get('order', {})
    
    if action == 'meal':
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        order['meal_type'] = value
        order['dishes'] = []
        order['quantities'] = {}
        order['prices'] = {}
        order['delivery_date'] = get_delivery_date(value)
        context.user_data['order'] = order
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    try:
        order_message = await show_order_form(update, context)
        await context.bot.edit_message_text(
            chat_id=context.user_data['order_chat_id'],
            message_id=context.user_data['order_message_id'],
            text=order_message
        )
    except telegram.error.BadRequest as e:
        if "Message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –±–ª—é–¥
    prompt_message = translations.get_message('choose_dishes')
    dishes_with_prices = get_dishes_for_meal(order['meal_type'])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = _build_dish_keyboard(
        dishes_with_prices,
        order.get('quantities', {}),
        order.get('prices', {})
    )
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await query.message.reply_text(prompt_message, reply_markup=reply_markup)
    except telegram.error.BadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é: {e}")
        await query.message.reply_text(
            translations.get_message('error_try_again'),
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(translations.get_button('back'), callback_data="back")
            ]])
        )
    
    return DISH_SELECTION

@profile_time
@require_auth
async def handle_dish_selection(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "done":
        if not context.user_data['order'].get('dishes'):
            await query.answer(translations.get_message('no_dishes'), show_alert=True)
            return DISH_SELECTION
        
        try:
            prompt_message = translations.get_message('wishes_prompt')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('no_wishes'), callback_data="wishes:none")],
                [InlineKeyboardButton(translations.get_button('back'), callback_data="back")],
                [InlineKeyboardButton(translations.get_button('cancel'), callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.delete()
            
            context.user_data['state'] = WISHES
            
            sent_message = await context.bot.send_message(
                chat_id=context.user_data['order_chat_id'],
                text=prompt_message,
                reply_markup=reply_markup
            )
            context.user_data['prompt_message_id'] = sent_message.message_id
            return WISHES
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ì–æ—Ç–æ–≤–æ': {e}")
            return DISH_SELECTION
    
    action = query.data.split(':', 1)[0]
    order = context.user_data['order']
    
    if action == 'select_dish':
        # –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–æ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 1
        dish = query.data.split(':', 1)[1]
        order['quantities'][dish] = 1
        if dish not in order['dishes']:
            order['dishes'].append(dish)
            
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –∫—ç—à–∞
        dishes_with_prices = get_dishes_for_meal(order['meal_type'])
        for d, p, w in dishes_with_prices:
            if d == dish:
                order['prices'][dish] = p
                break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
        order_message = await show_order_form(update, context)
        await context.bot.edit_message_text(
            chat_id=context.user_data['order_chat_id'],
            message_id=context.user_data['order_message_id'],
            text=order_message
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–ª—é–¥
        prompt_message = translations.get_message('choose_dishes')
        dishes_with_prices = get_dishes_for_meal(order['meal_type'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = _build_dish_keyboard(
            dishes_with_prices,
            order.get('quantities', {}),
            order.get('prices', {})
        )
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.message.delete()
        except telegram.error.BadRequest:
            pass
            
        await context.bot.send_message(
            chat_id=context.user_data['order_chat_id'],
            text=prompt_message,
            reply_markup=reply_markup
        )
        return DISH_SELECTION
    
    elif action == 'quantity':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        _, dish, quantity = query.data.split(':')
        quantity = int(quantity)
        
        if quantity <= 0:
            # –£–¥–∞–ª—è–µ–º –±–ª—é–¥–æ –∏–∑ –∑–∞–∫–∞–∑–∞
            if dish in order['quantities']:
                del order['quantities'][dish]
            if dish in order['dishes']:
                order['dishes'].remove(dish)
            if dish in order.get('prices', {}):
                del order['prices'][dish]
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            order['quantities'][dish] = quantity
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –∫—ç—à–∞
            if dish not in order.get('prices', {}):
                dishes_with_prices = get_dishes_for_meal(order['meal_type'])
                for d, p, w in dishes_with_prices:
                    if d == dish:
                        order['prices'][dish] = p
                        break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
        order_message = await show_order_form(update, context)
        await context.bot.edit_message_text(
            chat_id=context.user_data['order_chat_id'],
            message_id=context.user_data['order_message_id'],
            text=order_message
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–ª—é–¥
        prompt_message = translations.get_message('choose_dishes')
        dishes_with_prices = get_dishes_for_meal(order['meal_type'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = _build_dish_keyboard(
            dishes_with_prices,
            order.get('quantities', {}),
            order.get('prices', {})
        )
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.message.delete()
        except telegram.error.BadRequest:
            pass
            
        await context.bot.send_message(
            chat_id=context.user_data['order_chat_id'],
            text=prompt_message,
            reply_markup=reply_markup
        )
        return DISH_SELECTION
    
    return DISH_SELECTION

async def process_order_save(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE, from_message=False):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."""
    order = context.user_data['order']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    processing_message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚è≥ –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑..."
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await update_user_info(update.effective_user)
    
    if 'timestamp' not in order:
        order['timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if 'status' not in order:
        order['status'] = '–ê–∫—Ç–∏–≤–µ–Ω'
    if 'user_id' not in order:
        order['user_id'] = str(update.effective_user.id)
    
    if 'order_id' not in order:
        order['order_id'] = get_next_order_id()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = update.effective_user.username or '-'
    username_link = f"t.me/{username}" if username != '-' else '-'
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    total = int(sum(float(order['prices'].get(dish, 0)) * order['quantities'].get(dish, 1) 
                   for dish in order['dishes']))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤—ã–¥–∞—á–∏ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    delivery_date = order.get('delivery_date')
    if isinstance(delivery_date, datetime):
        formatted_delivery_date = delivery_date.strftime("%d.%m.%y")
    elif isinstance(delivery_date, date):
        formatted_delivery_date = delivery_date.strftime("%d.%m.%y")
    else:
        formatted_delivery_date = delivery_date
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
        timestamp = order['timestamp']
        if isinstance(timestamp, str):
            try:
                timestamp = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
            except ValueError:
                try:
                    timestamp = datetime.strptime(timestamp, "%d.%m.%Y %H:%M:%S")
                except ValueError:
                    timestamp = datetime.now()
        formatted_timestamp = timestamp.strftime("%d.%m.%Y %H:%M:%S")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
        formatted_timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    order_data = {
        'order_id': order['order_id'],
        'timestamp': order['timestamp'],
        'status': order['status'],
        'user_id': order['user_id'],
        'username': username_link,
        'total_price': str(total),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        'room': order['room'],
        'name': order['name'],
        'meal_type': order['meal_type'],
        'dishes': order['dishes'],
        'quantities': order.get('quantities', {}),  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        'wishes': order.get('wishes', translations.get_message('no_wishes')),
        'delivery_date': formatted_delivery_date
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    success = False
    if not context.user_data.get('editing'):
        success = await save_order(order_data)
    else:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏ –∏—â–µ–º –Ω—É–∂–Ω—ã–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        from orderbot.services.sheets import get_orders_sheet
        orders_sheet = get_orders_sheet()
        all_orders = orders_sheet.get_all_values()
        order_found = False
        
        for idx, row in enumerate(all_orders):
            if (row[0] == order['order_id'] and  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∑–∞–∫–∞–∑–∞
                row[2] == '–ê–∫—Ç–∏–≤–µ–Ω' and          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –∞–∫—Ç–∏–≤–µ–Ω
                row[3] == order['user_id']):     # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É —Å —Å—É–º–º–æ–π –∑–∞–∫–∞–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    orders_sheet.update_cell(idx + 1, 6, float(total))  # –ö–æ–ª–æ–Ω–∫–∞ F (–∏–Ω–¥–µ–∫—Å 5) —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
                    success = await update_order(order['order_id'], idx + 1, order_data)
                    order_found = True
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
                    success = False
                break
        
        if not order_found:
            print(f"–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ —Å ID {order['order_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            message = translations.get_message('order_not_found')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
                [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
                [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            if from_message:
                await update.message.reply_text(message, reply_markup=reply_markup)
            else:
                await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
            return MENU
    
    if not success:
        message = translations.get_message('order_save_error')
        keyboard = [
            [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
            [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
            [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if from_message:
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
        return MENU
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–æ–π –∑–∞–∫–∞–∑–∞
    try:
        await context.bot.delete_message(
            chat_id=context.user_data['order_chat_id'],
            message_id=context.user_data['order_message_id']
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_stats(order['user_id'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    delivery_date_str = formatted_delivery_date
    meal_type_with_date = f"{translations.get_meal_type(order['meal_type'])} ({delivery_date_str})" if delivery_date_str else translations.get_meal_type(order['meal_type'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    dishes_list = []
    for dish in order['dishes']:
        quantity = order['quantities'].get(dish, 1)
        dishes_list.append(f"  ‚Ä¢ {dish} x{quantity}")
    dishes_str = '\n'.join(dishes_list)
    
    message = translations.get_message('order_updated' if context.user_data.get('editing') else 'order_created', 
                                     order_id=order['order_id'],
                                     room=order['room'],
                                     name=order['name'],
                                     meal_type=meal_type_with_date,
                                     dishes=f"\n{dishes_str}",  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º –±–ª—é–¥
                                     wishes=order.get('wishes', translations.get_message('no_wishes')),
                                     total=total,
                                     timestamp=formatted_timestamp)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [InlineKeyboardButton(translations.get_button('edit_order'), callback_data='edit_order')],
        [InlineKeyboardButton(translations.get_button('cancel_order'), callback_data='cancel_order')],
        [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
        [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
        [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await processing_message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if from_message:
        await update.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
    
    context.user_data['editing'] = False
    return MENU

async def handle_text_input(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞."""
    current_state = context.user_data.get('state', NAME)
    
    if current_state == WISHES:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data['prompt_message_id']
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–∂–µ–ª–∞–Ω–∏–π: {e}")
        
        context.user_data['order']['wishes'] = update.message.text
        await update.message.delete()
        return await process_order_save(update, context, from_message=True)
    
    context.user_data['order']['name'] = update.message.text
    return await ask_meal_type(update, context)

@profile_time
@require_auth
async def show_user_orders(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è - —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    is_command = bool(update.message)
    
    if not is_command:
        query = update.callback_query
        await query.answer()
    
    user_id = str(update.effective_user.id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MENU, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if 'state' not in context.user_data:
        context.user_data['state'] = MENU
    
    from orderbot.services.sheets import get_orders_sheet
    orders_sheet = get_orders_sheet()
    all_orders = orders_sheet.get_all_values()
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ "–ü—Ä–∏–Ω—è—Ç", "–ê–∫—Ç–∏–≤–µ–Ω" –∏ "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
    user_orders = [row for row in all_orders[1:] if row[3] == user_id and row[2] in ['–ü—Ä–∏–Ω—è—Ç', '–ê–∫—Ç–∏–≤–µ–Ω', '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã']]
    
    if not user_orders:
        message = escape_markdown_v2(translations.get_message('no_active_orders'))
        keyboard = [
            [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
            [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if is_command:
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Å—Ç–∞—Ç—É—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", "–ü—Ä–∏–Ω—è—Ç", "–ê–∫—Ç–∏–≤–µ–Ω"
        def order_status_priority(status):
            if status == '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã':
                return 0
            elif status == '–ü—Ä–∏–Ω—è—Ç':
                return 1
            else:  # –ê–∫—Ç–∏–≤–µ–Ω
                return 2
        
        user_orders.sort(key=lambda x: (order_status_priority(x[2]), x[1]))
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        awaiting_payment_orders = [order for order in user_orders if order[2] == '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã']
        processing_orders = [order for order in user_orders if order[2] == '–ü—Ä–∏–Ω—è—Ç']
        active_orders = [order for order in user_orders if order[2] == '–ê–∫—Ç–∏–≤–µ–Ω']
        
        messages = []
        current_message = ""
        total_sum = 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã
        if awaiting_payment_orders:
            messages.append(escape_markdown_v2("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã:"))
            for order in awaiting_payment_orders:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                delivery_date = order[11] if order[11] else None
                meal_type = order[8]
                meal_type_with_date = f"{translations.get_meal_type(meal_type)} ({delivery_date})" if delivery_date else translations.get_meal_type(meal_type)
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2
                escaped_order_id = escape_markdown_v2(order[0])
                escaped_status = escape_markdown_v2(order[2])
                escaped_timestamp = escape_markdown_v2(order[1])
                escaped_room = escape_markdown_v2(order[6])
                escaped_name = escape_markdown_v2(order[7])
                escaped_meal_type = escape_markdown_v2(meal_type_with_date)
                
                order_info = (
                    f"üí∞ –ó–∞–∫–∞–∑ *{escaped_order_id}* \\({escaped_status}\\)\n"
                    f"üçΩ –í—Ä–µ–º—è: {escaped_meal_type}\n"
                )
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–ª—é–¥–∞–º–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ
                dishes = order[9].split(', ')
                for dish in dishes:
                    escaped_dish = escape_markdown_v2(dish)
                    order_info += f"  ‚Ä¢ {escaped_dish}\n"
                
                order_sum = int(float(order[5])) if order[5] else 0
                total_sum += order_sum
                escaped_sum = escape_markdown_v2(str(order_sum))
                order_info += f"üí∞ –°—É–º–º–∞: {escaped_sum} —Ä\\.\n"
                order_info += translations.get_message('active_orders_separator')
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
                if len(current_message + order_info) > 3000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –¥–æ–ø. —Ç–µ–∫—Å—Ç–∞
                    messages.append(current_message)
                    current_message = order_info
                else:
                    current_message += order_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        if processing_orders:
            if current_message:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                messages.append(current_message)
                current_message = ""
            
            messages.append(escape_markdown_v2("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–≤–∞—Ä—É:"))
            for order in processing_orders:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                delivery_date = order[11] if order[11] else None
                meal_type = order[8]
                meal_type_with_date = f"{translations.get_meal_type(meal_type)} ({delivery_date})" if delivery_date else translations.get_meal_type(meal_type)
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2
                escaped_order_id = escape_markdown_v2(order[0])
                escaped_status = escape_markdown_v2(order[2])
                escaped_timestamp = escape_markdown_v2(order[1])
                escaped_room = escape_markdown_v2(order[6])
                escaped_name = escape_markdown_v2(order[7])
                escaped_meal_type = escape_markdown_v2(meal_type_with_date)
                
                order_info = (
                    f"üõé –ó–∞–∫–∞–∑ *{escaped_order_id}* \\({escaped_status}\\)\n"
                    f"üçΩ –í—Ä–µ–º—è: {escaped_meal_type}\n"
                )
                order_sum = int(float(order[5])) if order[5] else 0
                total_sum += order_sum
                escaped_sum = escape_markdown_v2(str(order_sum))
                order_info += f"üí∞ –°—É–º–º–∞: {escaped_sum} —Ä\\.\n"
                order_info += translations.get_message('active_orders_separator')
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
                if len(current_message + order_info) > 3000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –¥–æ–ø. —Ç–µ–∫—Å—Ç–∞
                    messages.append(current_message)
                    current_message = order_info
                else:
                    current_message += order_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        if active_orders:
            if current_message:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                messages.append(current_message)
                current_message = ""
            
            messages.append(escape_markdown_v2("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:"))
            for order in active_orders:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                delivery_date = order[11] if order[11] else None
                meal_type = order[8]
                meal_type_with_date = f"{translations.get_meal_type(meal_type)} ({delivery_date})" if delivery_date else translations.get_meal_type(meal_type)
                
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2
                escaped_order_id = escape_markdown_v2(order[0])
                escaped_status = escape_markdown_v2(order[2])
                escaped_timestamp = escape_markdown_v2(order[1])
                escaped_room = escape_markdown_v2(order[6])
                escaped_name = escape_markdown_v2(order[7])
                escaped_meal_type = escape_markdown_v2(meal_type_with_date)
                
                order_info = (
                    f"‚úÖ –ó–∞–∫–∞–∑ *{escaped_order_id}* \\({escaped_status}\\)\n"
                    f"‚è∞ {escaped_timestamp}\n"
                    f"üè† –ö–æ–º–Ω–∞—Ç–∞: {escaped_room}\n"
                    f"üë§ –ò–º—è: {escaped_name}\n"
                    f"üçΩ –í—Ä–µ–º—è –¥–Ω—è: {escaped_meal_type}\n"
                    f"üç≤ –ë–ª—é–¥–∞:\n"
                )
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–ª—é–¥–∞–º–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±–ª—é–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ
                dishes = order[9].split(', ')
                for dish in dishes:
                    escaped_dish = escape_markdown_v2(dish)
                    order_info += f"  ‚Ä¢ {escaped_dish}\n"
                
                escaped_wishes = escape_markdown_v2(order[10])
                order_info += f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {escaped_wishes}\n"
                
                order_sum = int(float(order[5])) if order[5] else 0
                total_sum += order_sum
                escaped_sum = escape_markdown_v2(str(order_sum))
                order_info += f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {escaped_sum} —Ä\\.\n"
                order_info += translations.get_message('active_orders_separator')
                
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
                if len(current_message + order_info) > 3000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è –¥–æ–ø. —Ç–µ–∫—Å—Ç–∞
                    messages.append(current_message)
                    current_message = order_info
                else:
                    current_message += order_info
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if current_message:
            messages.append(current_message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        escaped_total_sum = escape_markdown_v2(str(total_sum))
        total_sum_message = translations.get_message('total_sum', sum=escaped_total_sum)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_sum}, —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {escaped_total_sum}")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–º–º–µ: {total_sum_message}")
        
        messages[-1] += total_sum_message
        
        try:
            if not user_orders or len(messages) == 1:
                # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç –∏–ª–∏ –≤—Å–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = messages[0] if user_orders else message
                if is_command:
                    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN_V2)
                else:
                    await update.callback_query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN_V2)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if is_command:
                    await update.message.reply_text(messages[0], parse_mode=ParseMode.MARKDOWN_V2)
                else:
                    await update.callback_query.edit_message_text(messages[0], parse_mode=ParseMode.MARKDOWN_V2)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                for msg in messages[1:]:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=msg,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = [
                [InlineKeyboardButton(translations.get_button('pay_orders'), callback_data='pay_orders')],
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
                [InlineKeyboardButton(translations.get_button('edit_active_orders'), callback_data='edit_active_orders')],
                [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=translations.get_message('what_next'),
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {e}")
            logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
            error_message = translations.get_message('orders_display_error')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
                [InlineKeyboardButton(translations.get_button('edit_active_orders'), callback_data='edit_active_orders')],
                [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            if is_command:
                await update.message.reply_text(error_message, reply_markup=reply_markup)
            else:
                await update.callback_query.edit_message_text(error_message, reply_markup=reply_markup)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ MENU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    context.user_data['state'] = MENU
    return MENU

@require_auth
async def cancel_order(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞."""
    query = update.callback_query
    await query.answer()

    order = context.user_data['order']
    user_id = str(update.effective_user.id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏ –∏—â–µ–º –Ω—É–∂–Ω—ã–π –¥–ª—è –æ—Ç–º–µ–Ω—ã
        from orderbot.services.sheets import get_orders_sheet
        orders_sheet = get_orders_sheet()
        all_orders = orders_sheet.get_all_values()
        order_found = False
        
        for idx, row in enumerate(all_orders):
            if (row[0] == order['order_id'] and  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∑–∞–∫–∞–∑–∞
                row[2] in ['–ê–∫—Ç–∏–≤–µ–Ω', '–ü—Ä–∏–Ω—è—Ç', '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'] and  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                row[3] == user_id):              # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
                # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–û—Ç–º–µ–Ω—ë–Ω"
                orders_sheet.update_cell(idx + 1, 3, '–û—Ç–º–µ–Ω—ë–Ω')
                order_found = True
                break
        
        if not order_found:
            message = translations.get_message('order_cancel_error')
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
            await update_user_stats(user_id)
            message = translations.get_message('order_cancelled')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
            [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
            [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, reply_markup=reply_markup)
        context.user_data.clear()
        return MENU
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: {e}")
        message = translations.get_message('order_cancel_error')
        keyboard = [
            [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
            [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
            [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)
        return MENU

async def get_order_info(order_id: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã."""
    from orderbot.services.sheets import get_orders_sheet
    orders_sheet = get_orders_sheet()
    all_orders = orders_sheet.get_all_values()
    for row in all_orders[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if row[0] == order_id:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            order_info = {
                'order_id': row[0],
                'timestamp': row[1],
                'status': row[2],
                'user_id': row[3],
                'username': row[4],
                'total_price': row[5],
                'room': row[6],
                'name': row[7],
                'meal_type': row[8],
                'dishes': row[9].split(', ') if row[9] else [],
                'wishes': row[10],
                'delivery_date': row[11]
            }
            return order_info
    return None

async def handle_order_update(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–∞–∑–µ."""
    query = update.callback_query
    await query.answer()

    if query.data == 'new_order':
        return await ask_room(update, context)
    
    if query.data.startswith('edit_order:'):
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
        order_id = query.data.split(':')[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order_info = await get_order_info(order_id)
        
        if not order_info:
            message = translations.get_message('order_not_found')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
                [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
                [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            return MENU
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['order'] = order_info
        context.user_data['editing'] = True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        delivery_date = order_info['delivery_date']
        meal_type = order_info['meal_type']
        meal_type_with_date = f"{translations.get_meal_type(meal_type)} ({delivery_date})" if delivery_date else translations.get_meal_type(meal_type)
        
        message = (
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ ‚Ññ{order_info['order_id']}:\n\n"
            f"üè† –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã: {order_info['room']}\n"
            f"üë§ –ò–º—è: {order_info['name']}\n"
            f"üçΩ –í—Ä–µ–º—è –¥–Ω—è: {meal_type_with_date}\n"
            f"üç≤ –ë–ª—é–¥–∞:\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥
        for dish in order_info['dishes']:
            message += f"  ‚Ä¢ {dish}\n"
        
        message += f"üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: {order_info['wishes']}\n"
        message += f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order_info['total_price']} —Ä.\n"
        message += f"‚è∞ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω: {order_info['timestamp']}\n"
        message += f"üìä –°—Ç–∞—Ç—É—Å: {order_info['status']}\n\n"
        message += "–•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?"
        
        keyboard = [
            [InlineKeyboardButton(translations.get_button('edit_order'), callback_data="edit_order")],
            [InlineKeyboardButton(translations.get_button('cancel_order'), callback_data="cancel_order")],
            [InlineKeyboardButton(translations.get_button('return_to_list'), callback_data="edit_active_orders")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)
        return MENU
    
    if query.data == 'edit_order':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ø–∏—é —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞
        context.user_data['original_order'] = context.user_data['order'].copy()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        old_order = context.user_data['order']
        saved_data = {
            'order_id': old_order['order_id'],
            'timestamp': old_order['timestamp'],
            'status': old_order['status'],
            'user_id': old_order['user_id'],
            'prices': old_order.get('prices', {}),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—ã –±–ª—é–¥
            'quantities': old_order.get('quantities', {})  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        }
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        context.user_data['order'] = saved_data
        context.user_data['editing'] = True
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã
        return await ask_room(update, context)
    
    if query.data == 'cancel_order':
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = context.user_data['order']
        user_id = str(update.effective_user.id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏ –∏—â–µ–º –Ω—É–∂–Ω—ã–π –¥–ª—è –æ—Ç–º–µ–Ω—ã
            from orderbot.services.sheets import get_orders_sheet
            orders_sheet = get_orders_sheet()
            all_orders = orders_sheet.get_all_values()
            order_found = False
            
            for idx, row in enumerate(all_orders):
                if (row[0] == order['order_id'] and  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∑–∞–∫–∞–∑–∞
                    row[2] in ['–ê–∫—Ç–∏–≤–µ–Ω', '–ü—Ä–∏–Ω—è—Ç', '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'] and  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                    row[3] == user_id):              # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    
                    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–û—Ç–º–µ–Ω—ë–Ω"
                    orders_sheet.update_cell(idx + 1, 3, '–û—Ç–º–µ–Ω—ë–Ω')
                    order_found = True
                    break
            
            if not order_found:
                message = translations.get_message('order_cancel_error')
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
                await update_user_stats(user_id)
                message = translations.get_message('order_cancelled')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
                [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
                [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(message, reply_markup=reply_markup)
            context.user_data.clear()
            return MENU
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: {e}")
            message = translations.get_message('order_cancel_error')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
                [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
                [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            return MENU
    
    if query.data == 'back':
        current_state = context.user_data.get('state', NAME)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        chat_id = context.user_data['order_chat_id']
        message_id = context.user_data['order_message_id']
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.message.delete()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if current_state == NAME:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–Ω–∞—Ç—ã
            context.user_data['state'] = ROOM
            keyboard = [
                [InlineKeyboardButton(f"{i}", callback_data=f"room:{i}") for i in range(1, 6)],
                [InlineKeyboardButton(f"{i}", callback_data=f"room:{i}") for i in range(6, 11)],
                [InlineKeyboardButton(f"{i}", callback_data=f"room:{i}") for i in range(11, 16)],
                [InlineKeyboardButton(f"{i}", callback_data=f"room:{i}") for i in range(16, 21)],
                [InlineKeyboardButton(translations.get_button('cancel'), callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(chat_id=chat_id, text=translations.get_message('choose_room'), reply_markup=reply_markup, parse_mode="MarkdownV2")
            return ROOM
            
        elif current_state == MEAL_TYPE:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
            context.user_data['state'] = NAME
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back'), callback_data="back")],
                [InlineKeyboardButton(translations.get_button('cancel'), callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            sent_message = await context.bot.send_message(chat_id=chat_id, text=translations.get_message('enter_name'), reply_markup=reply_markup)
            context.user_data['prompt_message_id'] = sent_message.message_id
            return NAME

        elif current_state == DISH_SELECTION:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –µ–¥—ã
            context.user_data['state'] = MEAL_TYPE
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            breakfast_date = get_delivery_date('breakfast')
            lunch_date = get_delivery_date('lunch')
            dinner_date = get_delivery_date('dinner')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏
            date_format = "%d.%m"
            breakfast_str = breakfast_date.strftime(date_format)
            lunch_str = lunch_date.strftime(date_format)
            dinner_str = dinner_date.strftime(date_format)
            
            keyboard = [
                [
                    InlineKeyboardButton(f"{translations.get_button('breakfast')} ({breakfast_str})", 
                                       callback_data="meal:–ó–∞–≤—Ç—Ä–∞–∫"),
                    InlineKeyboardButton(f"{translations.get_button('lunch')} ({lunch_str})", 
                                       callback_data="meal:–û–±–µ–¥"),
                    InlineKeyboardButton(f"{translations.get_button('dinner')} ({dinner_str})", 
                                       callback_data="meal:–£–∂–∏–Ω")
                ],
                [InlineKeyboardButton(translations.get_button('back'), callback_data="back")],
                [InlineKeyboardButton(translations.get_button('cancel'), callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(chat_id=chat_id, text=translations.get_message('choose_meal'), reply_markup=reply_markup)
            return MEAL_TYPE

        elif current_state == WISHES:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –±–ª—é–¥
            context.user_data['state'] = DISH_SELECTION
            order = context.user_data['order']
            keyboard = _build_dish_keyboard(
                get_dishes_for_meal(order['meal_type']),
                order.get('quantities', {}),
                order.get('prices', {})
            )
            await context.bot.send_message(chat_id=chat_id, text=translations.get_message('choose_dishes'), reply_markup=InlineKeyboardMarkup(keyboard))
            return DISH_SELECTION
    
    if query.data == 'cancel':
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
        try:
            if context.user_data.get('order_message_id'):
                from orderbot.services.sheets import get_orders_sheet
                orders_sheet = get_orders_sheet()
                orders_sheet.delete_row(context.user_data['order_message_id'])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ: {e}")
            
        if context.user_data.get('editing'):
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
            context.user_data['order'] = context.user_data['original_order']
            context.user_data['editing'] = False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
            message = translations.get_message('edit_cancelled')
            message += await show_order_form(update, context)
            message += translations.get_message('what_next')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('edit_order'), callback_data='edit_order')],
                [InlineKeyboardButton(translations.get_button('cancel_order'), callback_data='cancel_order')],
                [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
                [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
                [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
            ]
        else:
            # –ü–æ–ª–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
            context.user_data.clear()
            message = translations.get_message('new_order_cancelled')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('make_order'), callback_data='new_order')],
                [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
                [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)
        return MENU
    
    action, value = query.data.split(':')
    if action == 'wishes' and value == 'none':
        context.user_data['order']['wishes'] = translations.get_message('no_wishes')
        return await process_order_save(update, context)
    
    return MENU

@require_auth
async def show_edit_active_orders(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    query = update.callback_query
    await query.answer()
    
    user_id = str(update.effective_user.id)
    from orderbot.services.sheets import get_orders_sheet
    orders_sheet = get_orders_sheet()
    all_orders = orders_sheet.get_all_values()
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏ –∑–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã
    editable_orders = [row for row in all_orders[1:] if row[3] == user_id and row[2] in ['–ê–∫—Ç–∏–≤–µ–Ω', '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã']]
    
    if not editable_orders:
        message = translations.get_message('no_active_orders')
        keyboard = [
            [InlineKeyboardButton(translations.get_button('new_order'), callback_data='new_order')],
            [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)
        return MENU
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    message = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    keyboard = []
    for order in editable_orders:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        delivery_date = order[11] if order[11] else None
        meal_type = order[8]
        meal_type_with_date = f"{translations.get_meal_type(meal_type)} ({delivery_date})" if delivery_date else translations.get_meal_type(meal_type)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        status_text = " (–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã)" if order[2] == '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã' else ""
        button_text = f"–ó–∞–∫–∞–∑ {order[0]} - {meal_type_with_date}{status_text}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"edit_order:{order[0]}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton(translations.get_button('back'), callback_data="my_orders")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)
    return MENU

@profile_time
async def start_new_order(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    try:
        user_id = str(update.effective_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not is_user_authorized(user_id):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            keyboard = [[KeyboardButton(translations.get_button('share_phone'), request_contact=True)]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(translations.get_message('phone_request'), reply_markup=reply_markup)
            return PHONE
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞
        if not is_order_time():
            keyboard = [[InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                translations.get_message('wrong_order_time'),
                reply_markup=reply_markup
            )
            return MENU
            
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        context.user_data['order'] = {}
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–º–Ω–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton(f"{i}", callback_data=f"room:{i}") for i in range(1, 6)],
            [InlineKeyboardButton(f"{i}", callback_data=f"room:{i}") for i in range(6, 11)],
            [InlineKeyboardButton(f"{i}", callback_data=f"room:{i}") for i in range(11, 16)],
            [InlineKeyboardButton(f"{i}", callback_data=f"room:{i}") for i in range(16, 21)],
            [InlineKeyboardButton(translations.get_button('cancel'), callback_data='cancel')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–æ–π –∑–∞–∫–∞–∑–∞
        order_message = await show_order_form(update, context)
        sent_message = await update.message.reply_text(order_message)
        context.user_data['order_chat_id'] = sent_message.chat_id
        context.user_data['order_message_id'] = sent_message.message_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–º–Ω–∞—Ç—ã
        await update.message.reply_text(translations.get_message('choose_room'), reply_markup=reply_markup, parse_mode="MarkdownV2")
        return ROOM
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞: {e}")
        await update.message.reply_text(translations.get_message('error'))
        return MENU 