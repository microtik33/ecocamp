from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime
import logging
import tracemalloc
from ..utils.profiler import get_execution_stats, clear_stats
from ..services.sheets import is_user_cook

async def performance_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
    
    –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤)
    if not is_user_cook(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    stats = get_execution_stats()
    
    if not stats:
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∫ –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É)
    sorted_stats = sorted(
        stats.items(), 
        key=lambda x: x[1]["avg"], 
        reverse=True
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*:\n\n"
    
    for func_name, func_stats in sorted_stats[:10]:  # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ 10 —Å–∞–º—ã—Ö –¥–æ–ª–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        # –°–æ–∫—Ä–∞—â–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        short_name = func_name.split('.')[-2:]
        short_name = '.'.join(short_name)
        
        message += f"*{short_name}*:\n"
        message += f"‚îú –ú–∏–Ω: {func_stats['min']:.3f} —Å–µ–∫\n"
        message += f"‚îú –ú–∞–∫—Å: {func_stats['max']:.3f} —Å–µ–∫\n"
        message += f"‚îú –°—Ä–µ–¥–Ω: {func_stats['avg']:.3f} —Å–µ–∫\n"
        message += f"‚îî –í—ã–∑–æ–≤–æ–≤: {func_stats['count']}\n\n"
    
    total_funcs = len(stats)
    if total_funcs > 10:
        message += f"_–ü–æ–∫–∞–∑–∞–Ω—ã 10 –∏–∑ {total_funcs} —Ñ—É–Ω–∫—Ü–∏–π_"
    
    await update.message.reply_text(message, parse_mode="Markdown")

async def clear_performance_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—á–∏—â–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    
    –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤)
    if not is_user_cook(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
        return
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    clear_stats()
    
    await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω–∞.")

async def memory_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –±–æ—Ç–æ–º.
    
    –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤)
    if not is_user_cook(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–Ω–∏–º–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    snapshot = tracemalloc.take_snapshot()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º –∏ —Å—Ç—Ä–æ–∫–∞–º
    top_stats = snapshot.statistics('lineno')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏*:\n\n"
    
    for stat in top_stats[:10]:  # –¢–æ–ª—å–∫–æ 10 —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        # –°–æ–∫—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        filename = stat.traceback[0].filename.split('/')[-2:]
        filename = '/'.join(filename)
        
        line = stat.traceback[0].lineno
        size_kb = stat.size / 1024  # –†–∞–∑–º–µ—Ä –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö
        
        message += f"*{filename}:{line}*:\n"
        message += f"‚îî –†–∞–∑–º–µ—Ä: {size_kb:.2f} –ö–ë\n\n"
    
    total = sum(stat.size for stat in top_stats)
    total_kb = total / 1024
    message += f"*–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è*: {total_kb:.2f} –ö–ë\n"
    
    if len(top_stats) > 10:
        message += f"_–ü–æ–∫–∞–∑–∞–Ω—ã 10 –∏–∑ {len(top_stats)} –∑–∞–ø–∏—Å–µ–π_"
    
    await update.message.reply_text(message, parse_mode="Markdown") 