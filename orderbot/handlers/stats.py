from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime
import logging
import tracemalloc
from ..utils.profiler import get_execution_stats, clear_stats, execution_stats
from ..services.sheets import is_user_cook
from ..utils.auth_decorator import require_auth

@require_auth
async def performance_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
    
    –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤)
    if not is_user_cook(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    stats = get_execution_stats()
    
    if not stats:
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∫ –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É)
    sorted_stats = sorted(
        stats.items(), 
        key=lambda x: x[1]["avg"], 
        reverse=True
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ user_data
    if 'stats_page' not in context.user_data:
        context.user_data['stats_page'] = 0
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä page, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if context.args and len(context.args) > 0:
        try:
            page = int(context.args[0]) - 1  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å—á–µ—Ç —Å 1
            if page < 0:
                page = 0
            context.user_data['stats_page'] = page
        except:
            pass
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    items_per_page = 10
    total_funcs = len(sorted_stats)
    total_pages = (total_funcs + items_per_page - 1) // items_per_page
    
    # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    current_page = context.user_data['stats_page']
    if current_page >= total_pages:
        current_page = 0
        context.user_data['stats_page'] = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * items_per_page
    end_idx = min(start_idx + items_per_page, total_funcs)
    page_stats = sorted_stats[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è* (—Å—Ç—Ä. {current_page + 1}/{total_pages}):\n\n"
    
    for func_name, func_stats in page_stats:
        # –°–æ–∫—Ä–∞—â–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        short_name = func_name.split('.')[-2:]
        short_name = '.'.join(short_name)
        
        message += f"*{short_name}*:\n"
        message += f"‚îú –ú–∏–Ω: {func_stats['min']:.3f} —Å–µ–∫\n"
        message += f"‚îú –ú–∞–∫—Å: {func_stats['max']:.3f} —Å–µ–∫\n"
        message += f"‚îú –°—Ä–µ–¥–Ω: {func_stats['avg']:.3f} —Å–µ–∫\n"
        message += f"‚îî –í—ã–∑–æ–≤–æ–≤: {func_stats['count']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    message += f"_–ü–æ–∫–∞–∑–∞–Ω—ã {start_idx + 1}-{end_idx} –∏–∑ {total_funcs} —Ñ—É–Ω–∫—Ü–∏–π_\n\n"
    
    if total_pages > 1:
        message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/stats –Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã` –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏"
    
    await update.message.reply_text(message, parse_mode="Markdown")

@require_auth
async def clear_performance_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—á–∏—â–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    
    –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤)
    if not is_user_cook(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
        return
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    clear_stats()
    
    await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω–∞.")

@require_auth
async def memory_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –±–æ—Ç–æ–º.
    
    –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤)
    if not is_user_cook(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–Ω–∏–º–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    snapshot = tracemalloc.take_snapshot()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º –∏ —Å—Ç—Ä–æ–∫–∞–º
    top_stats = snapshot.statistics('lineno')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏*:\n\n"
    
    for stat in top_stats[:10]:  # –¢–æ–ª—å–∫–æ 10 —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        # –°–æ–∫—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        filename = stat.traceback[0].filename.split('/')[-2:]
        filename = '/'.join(filename)
        
        line = stat.traceback[0].lineno
        size_kb = stat.size / 1024  # –†–∞–∑–º–µ—Ä –≤ –∫–∏–ª–æ–±–∞–π—Ç–∞—Ö
        
        message += f"*{filename}:{line}*:\n"
        message += f"‚îî –†–∞–∑–º–µ—Ä: {size_kb:.2f} –ö–ë\n\n"
    
    total = sum(stat.size for stat in top_stats)
    total_kb = total / 1024
    message += f"*–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è*: {total_kb:.2f} –ö–ë\n"
    
    if len(top_stats) > 10:
        message += f"_–ü–æ–∫–∞–∑–∞–Ω—ã 10 –∏–∑ {len(top_stats)} –∑–∞–ø–∏—Å–µ–π_"
    
    await update.message.reply_text(message, parse_mode="Markdown")

@require_auth
async def function_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /funcstats –∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏
    –ù–∞–ø—Ä–∏–º–µ—Ä: /funcstats _update_menu_cache
    
    –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤.
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤)
    if not is_user_cook(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
        return
    
    if not context.args or len(context.args) == 0:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        stats = get_execution_stats()
        if not stats:
            await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π
        function_names = []
        for func_name in stats.keys():
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –º–æ–¥—É–ª—è
            short_name = func_name.split('.')[-1]
            function_names.append(short_name)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        function_names.sort()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ—É–Ω–∫—Ü–∏–π
        message = "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:*\n\n"
        message += '\n'.join([f"`{name}`" for name in function_names])
        message += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/funcstats –∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
        
        await update.message.reply_text(message, parse_mode="Markdown")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    func_name = context.args[0]
    
    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    found_full_name = None
    for full_name in execution_stats.keys():
        if full_name.endswith('.' + func_name):
            found_full_name = full_name
            break
    
    if not found_full_name:
        await update.message.reply_text(f"–§—É–Ω–∫—Ü–∏—è '{func_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    times = execution_stats[found_full_name]
    
    if not times:
        await update.message.reply_text(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ '{func_name}'.")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    min_time = min(times)
    max_time = max(times)
    avg_time = sum(times) / len(times)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message = f"üìä *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏* `{func_name}`:\n\n"
    message += f"*–ú–æ–¥—É–ª—å:* `{'.'.join(found_full_name.split('.')[:-1])}`\n"
    message += f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤:* {len(times)}\n\n"
    message += f"*–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:* {min_time:.3f} —Å–µ–∫\n"
    message += f"*–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:* {max_time:.3f} —Å–µ–∫\n"
    message += f"*–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:* {avg_time:.3f} —Å–µ–∫\n"
    message += f"*–û–±—â–µ–µ –≤—Ä–µ–º—è:* {sum(times):.3f} —Å–µ–∫\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã–∑–æ–≤–æ–≤ –±–æ–ª—å—à–µ 5
    if len(times) > 5:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 5 –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –æ—Ç min –¥–æ max
        range_size = (max_time - min_time) / 5
        ranges = []
        
        for i in range(5):
            start = min_time + i * range_size
            end = min_time + (i + 1) * range_size
            if i == 4:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
                end = max_time + 0.001  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å max
            
            count = sum(1 for t in times if start <= t < end)
            percentage = (count / len(times)) * 100
            bar = "‚ñà" * int(percentage / 5)  # –ö–∞–∂–¥—ã–µ 5% - –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
            
            ranges.append((start, end, count, percentage, bar))
        
        message += "*–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*\n"
        
        for start, end, count, percentage, bar in ranges:
            message += f"{start:.2f}s - {end:.2f}s: {bar} {count} ({percentage:.1f}%)\n"
    
    await update.message.reply_text(message, parse_mode="Markdown") 