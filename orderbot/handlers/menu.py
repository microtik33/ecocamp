import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from .. import translations
from ..services.user import update_user_info
from ..utils.time_utils import is_order_time, is_menu_available_time
from ..utils.auth_decorator import require_auth
from .order import MENU
from ..services.sheets import get_dishes_for_meal, get_dish_composition
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

@require_auth
async def start(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."""
    context.user_data.clear()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = update.effective_user
    await update_user_info(user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞
    can_order = is_order_time()
    make_order_button = InlineKeyboardButton(
        translations.get_button('make_order'), 
        callback_data='new_order'
    ) if can_order else InlineKeyboardButton(
        translations.get_button('make_order') + ' ‚õî', 
        callback_data='order_time_error'
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –º–µ–Ω—é
    can_show_menu = is_menu_available_time()
    menu_button = InlineKeyboardButton(
        translations.get_button('tomorrow_menu'), 
        callback_data='tomorrow_menu'
    )
    
    today_menu_button = InlineKeyboardButton(
        translations.get_button('today_menu'), 
        callback_data='today_menu'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    keyboard = [
        [make_order_button],
        [today_menu_button],
        [menu_button],
        [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
        [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ callback
    if update.message:
        await update.message.reply_text(translations.get_message('welcome'), reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            text=translations.get_message('welcome'), 
            reply_markup=reply_markup
        )
    
    return MENU 

@require_auth
async def back_to_main_menu(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏."""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if 'conversation_state' not in context.user_data:
            context.user_data['conversation_state'] = MENU
        
        query = update.callback_query
        await query.answer()
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–∫–∞–∑–∞
        can_order = is_order_time()
        make_order_button = InlineKeyboardButton(
            translations.get_button('make_order'), 
            callback_data='new_order'
        ) if can_order else InlineKeyboardButton(
            translations.get_button('make_order') + ' ‚õî', 
            callback_data='order_time_error'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –º–µ–Ω—é
        can_show_menu = is_menu_available_time()
        menu_button = InlineKeyboardButton(
            translations.get_button('tomorrow_menu'), 
            callback_data='tomorrow_menu'
        )
        
        today_menu_button = InlineKeyboardButton(
            translations.get_button('today_menu'), 
            callback_data='today_menu'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = [
            [make_order_button],
            [today_menu_button],
            [menu_button],
            [InlineKeyboardButton(translations.get_button('my_orders'), callback_data='my_orders')],
            [InlineKeyboardButton(translations.get_button('ask_question'), callback_data='question')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=translations.get_message('welcome'), 
            reply_markup=reply_markup
        )
        
        return MENU
    except Exception as e:
        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = translations.get_message('error_loading_menu')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=error_message, 
                    reply_markup=reply_markup
                )
            elif update.message:
                await update.message.reply_text(
                    text=error_message,
                    reply_markup=reply_markup
                )
        except:
            # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        return MENU

@require_auth
async def show_tomorrow_menu(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞ –∑–∞–≤—Ç—Ä–∞."""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç —Ä–∞–±–æ—Ç—É –∫–Ω–æ–ø–æ–∫ –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Å /menu
        if 'conversation_state' not in context.user_data:
            context.user_data['conversation_state'] = MENU
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞ (–∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback)
        is_callback = update.callback_query is not None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if is_callback:
                query = update.callback_query
                await query.answer()
                # –í —Å–ª—É—á–∞–µ callback –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ
                temp_message = await query.edit_message_text(translations.get_message('loading_menu'))
            else:
                # –î–ª—è –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                temp_message = await update.message.reply_text(translations.get_message('loading_menu'))
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if is_callback:
                temp_message = update.callback_query.message
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                temp_message = await update.message.reply_text("...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –º–µ–Ω—é –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        if not is_menu_available_time():
            # –ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            message = translations.get_message('menu_not_available')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                if is_callback:
                    await update.callback_query.edit_message_text(text=message, reply_markup=reply_markup)
                else:
                    await temp_message.edit_text(text=message, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ–Ω—é: {e}")
            return MENU
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        message = f"üçΩÔ∏è –ú–µ–Ω—é –Ω–∞ {tomorrow}:\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–∞ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞
        message += "üåÖ *–ó–∞–≤—Ç—Ä–∞–∫*\n"
        breakfast_dishes = get_dishes_for_meal('breakfast')
        if breakfast_dishes:
            for dish, price, weight in breakfast_dishes:
                if dish.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
                    message += f"- *{dish}* ({weight}) {price} —Ä\n"
        else:
            message += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥\n"
        
        message += "\nüïõ *–û–±–µ–¥*\n"
        lunch_dishes = get_dishes_for_meal('lunch')
        if lunch_dishes:
            for dish, price, weight in lunch_dishes:
                if dish.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
                    message += f"- *{dish}* ({weight}) {price} —Ä\n"
        else:
            message += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥\n"
        
        message += "\nüåá *–£–∂–∏–Ω*\n"
        dinner_dishes = get_dishes_for_meal('dinner')
        if dinner_dishes:
            for dish, price, weight in dinner_dishes:
                if dish.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
                    message += f"- *{dish}* ({weight}) {price} —Ä\n"
        else:
            message += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥\n"
        
        # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Å—Ç–∞–≤–æ–≤
        keyboard = [
            [InlineKeyboardButton(translations.get_button('dish_compositions'), callback_data='show_compositions')],
            [InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤—ã–∑–æ–≤–∞
        try:
            if is_callback:
                await update.callback_query.edit_message_text(text=message, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await temp_message.edit_text(text=message, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
            try:
                if is_callback:
                    await update.callback_query.edit_message_text(
                        text=translations.get_message('error_loading_menu'), 
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')
                        ]])
                    )
                else:
                    await update.message.reply_text(
                        text=translations.get_message('error_loading_menu'),
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')
                        ]])
                    )
            except:
                pass
            
        return MENU
    except Exception as e:
        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = translations.get_message('error_loading_menu')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=error_message, 
                    reply_markup=reply_markup
                )
            elif update.message:
                await update.message.reply_text(
                    text=error_message,
                    reply_markup=reply_markup
                )
        except:
            # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        return MENU

@require_auth
async def show_dish_compositions(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–∞–≤—ã –±–ª—é–¥ –∏–∑ –º–µ–Ω—é."""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if 'conversation_state' not in context.user_data:
            context.user_data['conversation_state'] = MENU
        
        query = update.callback_query
        await query.answer()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_text(translations.get_message('loading_compositions'))
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –º–µ–Ω—é –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        if not is_menu_available_time():
            # –ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            message = translations.get_message('menu_not_available')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text=message, reply_markup=reply_markup)
            return MENU
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Å—Ç–∞–≤–∞–º–∏
        message = f"üç¥ –°–æ—Å—Ç–∞–≤—ã –±–ª—é–¥ –Ω–∞ {tomorrow}:\n\n"
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–∞–≤–∞—Ö –±–ª—é–¥
        def add_compositions_for_meal_type(meal_type, meal_title):
            nonlocal message
            message += f"*{meal_title}:*\n\n"
            dishes = get_dishes_for_meal(meal_type)
            if dishes:
                for dish, _, _ in dishes:
                    if dish.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–µ –ø—É—Å—Ç–æ–µ
                        composition_info = get_dish_composition(dish)
                        message += f"*{dish}*\n"
                        if composition_info['composition']:
                            message += f"{composition_info['composition']}\n"
                        else:
                            message += "–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω\n"
                        if composition_info['calories']:
                            message += f"_{composition_info['calories']} –∫–∫–∞–ª_\n"
                        message += "\n"
            else:
                message += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        add_compositions_for_meal_type('breakfast', '–ó–∞–≤—Ç—Ä–∞–∫')
        add_compositions_for_meal_type('lunch', '–û–±–µ–¥')
        add_compositions_for_meal_type('dinner', '–£–∂–∏–Ω')
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton(translations.get_button('back_to_menu_list'), callback_data='tomorrow_menu')],
            [InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text=message, reply_markup=reply_markup, parse_mode='Markdown')
        return MENU
    except Exception as e:
        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–æ—Å—Ç–∞–≤–æ–≤ –±–ª—é–¥: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = translations.get_message('error_loading_compositions')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=error_message, 
                    reply_markup=reply_markup
                )
        except:
            # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        return MENU 

@require_auth
async def show_today_menu(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å —Å–æ—Å—Ç–∞–≤–∞–º–∏ –±–ª—é–¥."""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if 'conversation_state' not in context.user_data:
            context.user_data['conversation_state'] = MENU
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞ (–∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ callback)
        is_callback = update.callback_query is not None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if is_callback:
                query = update.callback_query
                await query.answer()
                temp_message = await query.edit_message_text(translations.get_message('loading_compositions'))
            else:
                temp_message = await update.message.reply_text(translations.get_message('loading_compositions'))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            if is_callback:
                temp_message = update.callback_query.message
            else:
                temp_message = await update.message.reply_text("...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥
        today = datetime.now().strftime("%d.%m.%y")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
        from ..services.sheets import client, get_composition_sheet, get_dish_composition
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç —Å –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        sheet = client.open_by_key("1169304186").sheet1
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
        all_values = sheet.get_all_values()
        
        found_row = None
        for row in all_values:
            if row[0] == today:
                found_row = row
                break
                
        if not found_row:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç
            message = f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è ({today}) –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                if is_callback:
                    await update.callback_query.edit_message_text(text=message, reply_markup=reply_markup)
                else:
                    await temp_message.edit_text(text=message, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–º –º–µ–Ω—é: {e}")
            return MENU
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Å—Ç–∞–≤–∞–º–∏ –±–ª—é–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        message = f"üç¥ –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today}):\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–∫–æ–ª–æ–Ω–∫–∏ 3-41)
        # –ò–Ω–¥–µ–∫—Å—ã –≤ Python –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0, –ø–æ—ç—Ç–æ–º—É –∫–æ–ª–æ–Ω–∫–∏ 3-41 —ç—Ç–æ –∏–Ω–¥–µ–∫—Å—ã 2-40
        dishes = [dish.strip() for dish in found_row[2:41] if dish.strip()]
                
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–∞—Ö
        for dish in dishes:
            composition_info = get_dish_composition(dish)
            message += f"*{dish}*\n"
            if composition_info['composition']:
                message += f"{composition_info['composition']}\n"
            else:
                message += "–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω\n"
            if composition_info['calories']:
                message += f"_{composition_info['calories']} –∫–∫–∞–ª_\n"
            message += "\n"
            
        # –ï—Å–ª–∏ –±–ª—é–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if not dishes:
            message += "–ë–ª—é–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if is_callback:
                await update.callback_query.edit_message_text(text=message, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await temp_message.edit_text(text=message, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
            try:
                if is_callback:
                    await update.callback_query.edit_message_text(
                        text=translations.get_message('error_loading_compositions'), 
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')
                        ]])
                    )
                else:
                    await update.message.reply_text(
                        text=translations.get_message('error_loading_compositions'),
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')
                        ]])
                    )
            except:
                pass
                
        return MENU
    except Exception as e:
        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = translations.get_message('error_loading_compositions')
            keyboard = [
                [InlineKeyboardButton(translations.get_button('back_to_menu'), callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=error_message, 
                    reply_markup=reply_markup
                )
            elif update.message:
                await update.message.reply_text(
                    text=error_message,
                    reply_markup=reply_markup
                )
        except:
            # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        return MENU 