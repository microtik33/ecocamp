from collections import defaultdict
from .sheets import orders_sheet
from datetime import datetime

def get_dishes_count():
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞ –≤–æ –≤—Å–µ—Ö –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    all_orders = orders_sheet.get_all_values()
    today = datetime.now().date()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –±–ª—é–¥
    dishes_count = defaultdict(int)
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
    for order in all_orders[1:]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã, –æ–ø–ª–∞—á–µ–Ω –∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        if (order[2] == '–ü—Ä–∏–Ω—è—Ç' or order[2] == '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã' or order[2] == '–û–ø–ª–∞—á–µ–Ω') and order[11]:
            try:
                delivery_date = datetime.strptime(order[11], "%d.%m.%y").date()
                if delivery_date == today:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏–∑ –∑–∞–∫–∞–∑–∞
                    dishes = [dish.strip() for dish in order[9].split(',')]
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
                    for dish in dishes:
                        dishes_count[dish] += 1
            except ValueError:
                continue
    
    return dict(dishes_count)

def get_orders_summary():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –ø—Ä–∏–Ω—è—Ç—ã–º –∑–∞–∫–∞–∑–∞–º, –∑–∞–∫–∞–∑–∞–º, –æ–∂–∏–¥–∞—é—â–∏–º –æ–ø–ª–∞—Ç—ã, –∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, –≥—Ä—É–ø–ø–∏—Ä—É—è –±–ª—é–¥–∞ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏.
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    all_orders = orders_sheet.get_all_values()
    today = datetime.now().date()
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –±–ª—é–¥ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
    breakfast_dishes = defaultdict(int)
    lunch_dishes = defaultdict(int)
    dinner_dishes = defaultdict(int)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö
    breakfast_orders = []
    lunch_orders = []
    dinner_orders = []
    
    total_orders = 0
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
    for order in all_orders[1:]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã, –æ–ø–ª–∞—á–µ–Ω –∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        if (order[2] == '–ü—Ä–∏–Ω—è—Ç' or order[2] == '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã' or order[2] == '–û–ø–ª–∞—á–µ–Ω') and order[11]:
            try:
                delivery_date = datetime.strptime(order[11], "%d.%m.%y").date()
                if delivery_date == today:
                    total_orders += 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –∏ —Å–ø–∏—Å–æ–∫ –±–ª—é–¥
                    meal_type = order[8]  # –¢–∏–ø –µ–¥—ã: –ó–∞–≤—Ç—Ä–∞–∫, –û–±–µ–¥ –∏–ª–∏ –£–∂–∏–Ω
                    dishes = [dish.strip() for dish in order[9].split(',')]
                    wishes = order[10] if order[10] and order[10] != "‚Äî" else None
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–º–µ—Ç–∫—É –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                    status_mark = ""
                    if order[2] == '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã':
                        status_mark = "üí∞ "
                    elif order[2] == '–û–ø–ª–∞—á–µ–Ω':
                        status_mark = "‚úÖ "
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
                    order_description = f"{status_mark}–ó–∞–∫–∞–∑ *‚Ññ{order[0]}*\n"
                    order_description += f"üè† –ö–æ–º–Ω–∞—Ç–∞: *{order[6]}*\n"
                    order_description += f"üë§ –ò–º—è: *{order[7]}*\n"
                    for dish in dishes:
                        order_description += f"‚Ä¢ {dish}\n"
                    if wishes:
                        order_description += f"–ü–æ–∂–µ–ª–∞–Ω–∏—è: *{wishes}*\n"
                    order_description += "‚îÄ" * 30 # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
                    if meal_type == '–ó–∞–≤—Ç—Ä–∞–∫':
                        breakfast_orders.append(order_description)
                        for dish in dishes:
                            # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –±–ª—é–¥–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
                            if ' x' in dish:
                                dish_name, quantity = dish.split(' x')
                                breakfast_dishes[dish_name] += int(quantity)
                            else:
                                breakfast_dishes[dish] += 1
                    elif meal_type == '–û–±–µ–¥':
                        lunch_orders.append(order_description)
                        for dish in dishes:
                            if ' x' in dish:
                                dish_name, quantity = dish.split(' x')
                                lunch_dishes[dish_name] += int(quantity)
                            else:
                                lunch_dishes[dish] += 1
                    elif meal_type == '–£–∂–∏–Ω':
                        dinner_orders.append(order_description)
                        for dish in dishes:
                            if ' x' in dish:
                                dish_name, quantity = dish.split(' x')
                                dinner_dishes[dish_name] += int(quantity)
                            else:
                                dinner_dishes[dish] += 1
            except ValueError:
                continue
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
    summary = {
        'total_orders': total_orders,
        'date': today.strftime("%d.%m.%Y"),  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
        'breakfast': {
            'count': len(breakfast_orders),
            'dishes': dict(breakfast_dishes),
            'orders': breakfast_orders
        },
        'lunch': {
            'count': len(lunch_orders),
            'dishes': dict(lunch_dishes),
            'orders': lunch_orders
        },
        'dinner': {
            'count': len(dinner_orders),
            'dishes': dict(dinner_dishes),
            'orders': dinner_orders
        }
    }
    
    return summary 